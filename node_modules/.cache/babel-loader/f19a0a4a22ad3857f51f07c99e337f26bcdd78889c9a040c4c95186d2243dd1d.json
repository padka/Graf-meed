{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var ImageField = function (props) {\n  var _a;\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    src = props.src,\n    title = props.title,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"src\", \"title\"]);\n  var record = useRecordContext(props);\n  var sourceValue = get(record, source);\n  var translate = useTranslate();\n  if (!sourceValue) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : React.createElement(Typography, __assign({\n      component: \"div\",\n      className: className\n    }, sanitizeFieldRestProps(rest)));\n  }\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(Root, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)), React.createElement(\"ul\", {\n      className: ImageFieldClasses.list\n    }, sourceValue.map(function (file, index) {\n      var fileTitleValue = get(file, title) || title;\n      var srcValue = get(file, src) || title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(\"img\", {\n        alt: fileTitleValue,\n        title: fileTitleValue,\n        src: srcValue,\n        className: ImageFieldClasses.image\n      }));\n    })));\n  }\n  var titleValue = ((_a = get(record, title)) === null || _a === void 0 ? void 0 : _a.toString()) || title;\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeFieldRestProps(rest)), React.createElement(\"img\", {\n    title: titleValue,\n    alt: titleValue,\n    src: sourceValue === null || sourceValue === void 0 ? void 0 : sourceValue.toString(),\n    className: ImageFieldClasses.image\n  }));\n};\n// What? TypeScript loses the displayName if we don't set it explicitly\nImageField.displayName = 'ImageField';\nImageField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  src: PropTypes.string,\n  title: PropTypes.string\n});\nvar PREFIX = 'RaImageField';\nexport var ImageFieldClasses = {\n  list: \"\".concat(PREFIX, \"-list\"),\n  image: \"\".concat(PREFIX, \"-image\")\n};\nvar Root = styled(Box, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(ImageFieldClasses.list)] = {\n  display: 'flex',\n  listStyleType: 'none'\n}, _a[\"& .\".concat(ImageFieldClasses.image)] = {\n  margin: '0.25rem',\n  width: 200,\n  height: 100,\n  objectFit: 'contain'\n}, _a));","map":{"version":3,"names":["React","styled","Box","Typography","PropTypes","get","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","ImageField","props","className","emptyText","source","src","title","rest","__rest","record","sourceValue","translate","createElement","__assign","component","variant","_","Array","isArray","Root","ImageFieldClasses","list","map","file","index","fileTitleValue","srcValue","key","alt","image","titleValue","_a","toString","displayName","propTypes","string","PREFIX","concat","name","overridesResolver","styles","root","display","listStyleType","margin","width","height","objectFit"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/node_modules/ra-ui-materialui/src/field/ImageField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { SxProps } from '@mui/system';\n\nexport const ImageField = <\n    RecordType extends Record<string, any> = Record<string, any>\n>(\n    props: ImageFieldProps<RecordType>\n) => {\n    const { className, emptyText, source, src, title, ...rest } = props;\n    const record = useRecordContext(props);\n    const sourceValue = get(record, source);\n    const translate = useTranslate();\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : (\n            <Typography\n                component=\"div\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <Root className={className} {...sanitizeFieldRestProps(rest)}>\n                <ul className={ImageFieldClasses.list}>\n                    {sourceValue.map((file, index) => {\n                        const fileTitleValue = get(file, title) || title;\n                        const srcValue = get(file, src) || title;\n\n                        return (\n                            <li key={index}>\n                                <img\n                                    alt={fileTitleValue}\n                                    title={fileTitleValue}\n                                    src={srcValue}\n                                    className={ImageFieldClasses.image}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Root>\n        );\n    }\n\n    const titleValue = get(record, title)?.toString() || title;\n\n    return (\n        <Root className={className} {...sanitizeFieldRestProps(rest)}>\n            <img\n                title={titleValue}\n                alt={titleValue}\n                src={sourceValue?.toString()}\n                className={ImageFieldClasses.image}\n            />\n        </Root>\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nImageField.displayName = 'ImageField';\n\nImageField.propTypes = {\n    ...fieldPropTypes,\n    src: PropTypes.string,\n    title: PropTypes.string,\n};\n\nconst PREFIX = 'RaImageField';\n\nexport const ImageFieldClasses = {\n    list: `${PREFIX}-list`,\n    image: `${PREFIX}-image`,\n};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${ImageFieldClasses.list}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n    },\n    [`& .${ImageFieldClasses.image}`]: {\n        margin: '0.25rem',\n        width: 200,\n        height: 100,\n        objectFit: 'contain',\n    },\n});\n\nexport interface ImageFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>\n> extends FieldProps<RecordType> {\n    src?: string;\n    title?: string;\n    sx?: SxProps;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}