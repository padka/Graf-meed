{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleAuthResponse = async response => {\n    const data = await response.json();\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error('Не валидные данные');\n      } else if (response.status === 409) {\n        throw new Error('Такой пользователь уже есть в системе');\n      } else {\n        throw new Error(data.message || 'Неверный логин или пароль');\n      }\n    }\n    return data;\n  };\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await handleAuthResponse(response);\n      setUser({\n        name: data.username,\n        role: data.userRole\n      }); // Используйте возвращаемое имя и роль\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (username, password, role = 'user') => {\n    // Добавляем параметр role с значением по умолчанию\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          role\n        }) // Отправляем роль на сервер\n      });\n\n      const data = await handleAuthResponse(response);\n      setUser({\n        name: data.username,\n        role: data.role\n      }); // Обновляем состояние с учетом роли\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Igm1dc4M8upOH2BD/7KW4CEHhO8=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","error","setError","handleAuthResponse","response","data","json","ok","status","Error","message","login","username","password","fetch","method","headers","body","JSON","stringify","name","role","userRole","localStorage","setItem","token","register","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nexport const AuthContext = createContext(null);\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleAuthResponse = async (response) => {\n    const data = await response.json();\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error('Не валидные данные');\n      } else if (response.status === 409) {\n        throw new Error('Такой пользователь уже есть в системе');\n      } else {\n        throw new Error(data.message || 'Неверный логин или пароль');\n      }\n    }\n    return data;\n  };\n\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await handleAuthResponse(response);\n      setUser({ name: data.username, role: data.userRole }); // Используйте возвращаемое имя и роль\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (username, password, role = 'user') => { // Добавляем параметр role с значением по умолчанию\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password, role }), // Отправляем роль на сервер\n      });\n      const data = await handleAuthResponse(response);\n      setUser({ name: data.username, role: data.role }); // Обновляем состояние с учетом роли\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    setError(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, error, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}