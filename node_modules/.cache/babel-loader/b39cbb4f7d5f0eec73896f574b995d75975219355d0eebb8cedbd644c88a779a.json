{"ast":null,"code":"import PropTypes from 'prop-types';\nexport var fieldPropTypes = {\n  sortBy: PropTypes.string,\n  sortByOrder: PropTypes.oneOf(['ASC', 'DESC']),\n  source: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.bool]),\n  sortable: PropTypes.bool,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  textAlign: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n  emptyText: PropTypes.string\n};","map":{"version":3,"names":["PropTypes","fieldPropTypes","sortBy","string","sortByOrder","oneOf","source","label","oneOfType","element","bool","sortable","className","cellClassName","headerClassName","textAlign","emptyText"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/node_modules/ra-ui-materialui/src/field/types.ts"],"sourcesContent":["import { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableCellProps } from '@mui/material/TableCell';\nimport { Call, Objects } from 'hotscript';\n\ntype TextAlign = TableCellProps['align'];\ntype SortOrder = 'ASC' | 'DESC';\ntype AnyString = string & {};\n\nexport interface FieldProps<\n    RecordType extends Record<string, any> = Record<string, any>\n> {\n    /**\n     * The field to use for sorting when users click this column head, if sortable.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#sortby\n     * @example\n     * const PostList = () => (\n     *     <List>\n     *         <Datagrid>\n     *             <TextField source=\"title\" />\n     *             <ReferenceField source=\"author_id\" sortBy=\"author.name\">\n     *                 <TextField source=\"name\" />\n     *             </ReferenceField>\n     *         </Datagrid>\n     *     </List>\n     * );\n     */\n    sortBy?: Call<Objects.AllPaths, RecordType> | AnyString;\n\n    /**\n     * The order used for sorting when users click this column head, if sortable.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#sortbyorder\n     * @example\n     * const PostList = () => (\n     *     <List>\n     *         <Datagrid>\n     *             <TextField source=\"title\" />\n     *             <DateField source=\"updated_at\" sortByOrder=\"DESC\" />\n     *         </Datagrid>\n     *     </List>\n     * );\n     */\n    sortByOrder?: SortOrder;\n\n    /**\n     * Name of the property to display.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#source\n     * @example\n     * const CommentList = () => (\n     *     <List>\n     *         <Datagrid>\n     *             <TextField source=\"author.name\" />\n     *             <TextField source=\"body\" />\n     *         </Datagrid>\n     *     </List>\n     * );\n     */\n    source?: Call<Objects.AllPaths, RecordType> extends never\n        ? AnyString\n        : Call<Objects.AllPaths, RecordType>;\n\n    /**\n     * Label to use as column header when using <Datagrid> or <SimpleShowLayout>.\n     * Defaults to the capitalized field name. Set to false to disable the label.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#label\n     * @example\n     * const PostList = () => (\n     *     <List>\n     *         <Datagrid>\n     *             <TextField source=\"title\" />\n     *             <TextField source=\"body\" label=\"Content\" />\n     *         </Datagrid>\n     *     </List>\n     * );\n     */\n    label?: string | ReactElement | boolean;\n\n    /**\n     * Set it to false to disable the click handler on the column header when used inside <Datagrid>.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#sortable\n     * @example\n     * const PostList = () => (\n     *     <List>\n     *         <Datagrid>\n     *             <TextField source=\"title\" />\n     *             <ReferenceField source=\"author_id\" sortable={false}>\n     *                 <TextField source=\"name\" />\n     *             </ReferenceField>\n     *         </Datagrid>\n     *     </List>\n     * );\n     */\n    sortable?: boolean;\n\n    /**\n     * A class name to apply to the root div element\n     */\n    className?: string;\n\n    /**\n     * A class name to apply to the cell element when used inside <Datagrid>.\n     */\n    cellClassName?: string;\n\n    /**\n     * A class name to apply to the header cell element when used inside <Datagrid>.\n     */\n    headerClassName?: string;\n\n    /*\n     * @deprecated this property is not used anymore\n     */\n    formClassName?: string;\n\n    /**\n     * The text alignment for the cell content, when used inside <Datagrid>.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#textalign\n     * @example\n     * const BasketTotal = () => {\n     *     const record = useRecordContext();\n     *     if (!record) return null;\n     *     const total = record.items.reduce((total, item) => total + item.price, 0);\n     *     return <span>{total}</span>;\n     * }\n     * BasketTotal.defaultProps = {\n     *     textAlign: 'right',\n     * };\n     */\n    textAlign?: TextAlign;\n\n    /**\n     * The text to display when the field value is empty. Defaults to empty string.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#emptytext\n     * @example\n     * const PostList = () => (\n     *     <List>\n     *         <Datagrid>\n     *             <TextField source=\"title\" />\n     *             <TextField source=\"author\" emptyText=\"missing data\" />\n     *         </Datagrid>\n     *     </List>\n     * );\n     */\n    emptyText?: string;\n\n    /**\n     * @deprecated\n     */\n    fullWidth?: boolean;\n\n    /**\n     * The current record to use. Defaults to the `RecordContext` value.\n     *\n     * @see https://marmelab.com/react-admin/Fields.html#record\n     */\n    record?: RecordType;\n\n    /**\n     * The resource name. Defaults to the `ResourceContext` value.\n     */\n    resource?: string;\n}\n\n/**\n * @deprecated use FieldProps instead\n */\nexport interface PublicFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n    SortByType = unknown\n> {\n    sortBy?: unknown extends SortByType\n        ? Call<Objects.AllPaths, RecordType>\n        : SortByType;\n    sortByOrder?: SortOrder;\n    source?: Call<Objects.AllPaths, RecordType>;\n    label?: string | ReactElement | boolean;\n    sortable?: boolean;\n    className?: string;\n    cellClassName?: string;\n    headerClassName?: string;\n    /*\n     * @deprecated this property is not used anymore\n     */\n    formClassName?: string;\n    textAlign?: TextAlign;\n    emptyText?: string;\n    fullWidth?: boolean;\n    record?: RecordType;\n    resource?: string;\n}\n\n/**\n * @deprecated use FieldProps instead\n */\nexport interface InjectedFieldProps<RecordType = any> {\n    record?: RecordType;\n    resource?: string;\n}\n\nexport const fieldPropTypes = {\n    sortBy: PropTypes.string,\n    sortByOrder: PropTypes.oneOf<SortOrder>(['ASC', 'DESC']),\n    source: PropTypes.string,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n        PropTypes.bool,\n    ]),\n    sortable: PropTypes.bool,\n    className: PropTypes.string,\n    cellClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    textAlign: PropTypes.oneOf<TextAlign>([\n        'inherit',\n        'left',\n        'center',\n        'right',\n        'justify',\n    ]),\n    emptyText: PropTypes.string,\n};\n"],"mappings":"AACA,OAAOA,SAAS,MAAM,YAAY;AA6MlC,OAAO,IAAMC,cAAc,GAAG;EAC1BC,MAAM,EAAEF,SAAS,CAACG,MAAM;EACxBC,WAAW,EAAEJ,SAAS,CAACK,KAAK,CAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;EACxDC,MAAM,EAAEN,SAAS,CAACG,MAAM;EACxBI,KAAK,EAAEP,SAAS,CAACQ,SAAS,CAAC,CACvBR,SAAS,CAACG,MAAM,EAChBH,SAAS,CAACS,OAAO,EACjBT,SAAS,CAACU,IAAI,CACjB,CAAC;EACFC,QAAQ,EAAEX,SAAS,CAACU,IAAI;EACxBE,SAAS,EAAEZ,SAAS,CAACG,MAAM;EAC3BU,aAAa,EAAEb,SAAS,CAACG,MAAM;EAC/BW,eAAe,EAAEd,SAAS,CAACG,MAAM;EACjCY,SAAS,EAAEf,SAAS,CAACK,KAAK,CAAY,CAClC,SAAS,EACT,MAAM,EACN,QAAQ,EACR,OAAO,EACP,SAAS,CACZ,CAAC;EACFW,SAAS,EAAEhB,SAAS,CAACG;CACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}