{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useCallback } from 'react';\n\n// Создаем контекст для аутентификации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  // Состояние для текущего пользователя\n  login: async () => {},\n  // Метод для входа пользователя\n  logout: () => {} // Метод для выхода пользователя\n});\n\n// Компонент провайдера для аутентификации\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null); // Хранение данных текущего пользователя\n\n  // Функция для входа пользователя\n  const login = useCallback(async (username, password) => {\n    try {\n      // Запрос на сервер для входа пользователя\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка входа. Пожалуйста, проверьте свои учетные данные и попробуйте снова.');\n      }\n\n      // Если запрос успешен, извлекаем токен и данные пользователя\n      const {\n        token,\n        user\n      } = await response.json();\n      setCurrentUser(user); // Обновляем состояние текущего пользователя\n      localStorage.setItem('token', token); // Сохраняем токен в localStorage\n    } catch (error) {\n      // В реальном приложении здесь должна быть обработка ошибок\n      console.error('Ошибка при попытке входа:', error);\n    }\n  }, []);\n\n  // Функция для выхода пользователя\n  const logout = useCallback(() => {\n    setCurrentUser(null); // Очищаем состояние текущего пользователя\n    localStorage.removeItem('token'); // Удаляем токен из localStorage\n  }, []);\n\n  // Объект для предоставления в контекст\n  const contextValue = {\n    currentUser,\n    login,\n    logout\n  };\n\n  // Провайдер контекста обертывает дочерние компоненты, предоставляя им доступ к контексту\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования аутентификации в компонентах\n_s(AuthProvider, \"bpGwbF2fa4mLqwMbXizXpDP/axw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","jsxDEV","_jsxDEV","AuthContext","currentUser","login","logout","AuthProvider","children","_s","setCurrentUser","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","token","user","json","localStorage","setItem","error","console","removeItem","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useCallback } from 'react';\n\n// Создаем контекст для аутентификации\nexport const AuthContext = createContext({\n  currentUser: null, // Состояние для текущего пользователя\n  login: async () => {}, // Метод для входа пользователя\n  logout: () => {} // Метод для выхода пользователя\n});\n\n// Компонент провайдера для аутентификации\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null); // Хранение данных текущего пользователя\n\n  // Функция для входа пользователя\n  const login = useCallback(async (username, password) => {\n    try {\n      // Запрос на сервер для входа пользователя\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка входа. Пожалуйста, проверьте свои учетные данные и попробуйте снова.');\n      }\n\n      // Если запрос успешен, извлекаем токен и данные пользователя\n      const { token, user } = await response.json();\n      setCurrentUser(user); // Обновляем состояние текущего пользователя\n      localStorage.setItem('token', token); // Сохраняем токен в localStorage\n    } catch (error) {\n      // В реальном приложении здесь должна быть обработка ошибок\n      console.error('Ошибка при попытке входа:', error);\n    }\n  }, []);\n\n  // Функция для выхода пользователя\n  const logout = useCallback(() => {\n    setCurrentUser(null); // Очищаем состояние текущего пользователя\n    localStorage.removeItem('token'); // Удаляем токен из localStorage\n  }, []);\n\n  // Объект для предоставления в контекст\n  const contextValue = {\n    currentUser,\n    login,\n    logout,\n  };\n\n  // Провайдер контекста обертывает дочерние компоненты, предоставляя им доступ к контексту\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования аутентификации в компонентах\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAEnE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvCM,WAAW,EAAE,IAAI;EAAE;EACnBC,KAAK,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EAAE;EACvBC,MAAM,EAAEA,CAAA,KAAM,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACL,WAAW,EAAEM,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMM,KAAK,GAAGL,WAAW,CAAC,OAAOW,QAAQ,EAAEC,QAAQ,KAAK;IACtD,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6EAA6E,CAAC;MAChG;;MAEA;MACA,MAAM;QAAEC,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAC7Cd,cAAc,CAACa,IAAI,CAAC,CAAC,CAAC;MACtBE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMrB,MAAM,GAAGN,WAAW,CAAC,MAAM;IAC/BU,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IACtBe,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAG;IACnB1B,WAAW;IACXC,KAAK;IACLC;EACF,CAAC;;EAED;EACA,oBACEJ,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAtB,QAAA,EACvCA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA3B,EAAA,CAlDaF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAmDzB,OAAO,MAAM+B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMC,UAAU,CAACrC,WAAW,CAAC;AAAA;AAACoC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}