{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Замените этот код запросом к вашему API\n      const response = await fakeLoginApi(username, password);\n      setUser({\n        name: username,\n        role: response.role\n      });\n    } catch (error) {\n      setError('Ошибка входа');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    // Здесь также можно удалить сохраненный токен из localStorage/sessionStorage\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n// Это просто пример функции, в реальном приложении её нужно заменить на запрос к API\n_s2(AuthProvider, \"Igm1dc4M8upOH2BD/7KW4CEHhO8=\");\n_c = AuthProvider;\nconst fakeLoginApi = (username, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (username === 'admin') {\n        resolve({\n          role: 'admin'\n        });\n      } else if (username === 'user') {\n        resolve({\n          role: 'user'\n        });\n      } else {\n        reject('User not found');\n      }\n    }, 1000);\n  });\n};\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","error","setError","login","username","password","response","fakeLoginApi","name","role","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Promise","resolve","reject","setTimeout","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["// AuthContext.js\nimport React, { createContext, useContext, useState } from 'react';\n\nconst AuthContext = createContext(null);\n\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Замените этот код запросом к вашему API\n      const response = await fakeLoginApi(username, password);\n      setUser({ name: username, role: response.role });\n    } catch (error) {\n      setError('Ошибка входа');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    // Здесь также можно удалить сохраненный токен из localStorage/sessionStorage\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, error, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Это просто пример функции, в реальном приложении её нужно заменить на запрос к API\nconst fakeLoginApi = (username, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (username === 'admin') {\n        resolve({ role: 'admin' });\n      } else if (username === 'user') {\n        resolve({ role: 'user' });\n      } else {\n        reject('User not found');\n      }\n    }, 1000);\n  });\n};\n\nexport default AuthProvider;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,IAAI,CAAC;AAGvC,OAAO,MAAMM,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1CL,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF;MACA,MAAMI,QAAQ,GAAG,MAAMC,YAAY,CAACH,QAAQ,EAAEC,QAAQ,CAAC;MACvDP,OAAO,CAAC;QAAEU,IAAI,EAAEJ,QAAQ;QAAEK,IAAI,EAAEH,QAAQ,CAACG;MAAK,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,QAAQ,CAAC,cAAc,CAAC;IAC1B,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACnBZ,OAAO,CAAC,IAAI,CAAC;IACb;EACF,CAAC;;EAED,oBACER,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAEE,SAAS;MAAEE,KAAK;MAAEE,KAAK;MAAEO;IAAO,CAAE;IAAAf,QAAA,EACpEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAApB,GAAA,CA/BaF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAgCzB,MAAMa,YAAY,GAAGA,CAACH,QAAQ,EAAEC,QAAQ,KAAK;EAC3C,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,IAAIjB,QAAQ,KAAK,OAAO,EAAE;QACxBe,OAAO,CAAC;UAAEV,IAAI,EAAE;QAAQ,CAAC,CAAC;MAC5B,CAAC,MAAM,IAAIL,QAAQ,KAAK,MAAM,EAAE;QAC9Be,OAAO,CAAC;UAAEV,IAAI,EAAE;QAAO,CAAC,CAAC;MAC3B,CAAC,MAAM;QACLW,MAAM,CAAC,gBAAgB,CAAC;MAC1B;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAED,eAAe1B,YAAY;AAAC,IAAAuB,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}