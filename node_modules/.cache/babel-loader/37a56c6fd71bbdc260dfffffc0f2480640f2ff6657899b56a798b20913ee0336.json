{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создаем контекст аутентификации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n// Хук для удобного доступа к контексту аутентификации\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Провайдер для контекста аутентификации, управляющий состоянием аутентификации\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null); // Состояние текущего пользователя\n  const [isLoading, setIsLoading] = useState(true); // Индикатор загрузки\n  const [error, setError] = useState(null); // Сообщения об ошибках\n\n  useEffect(() => {\n    // Проверка наличия токена при монтировании компонента\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData(token);\n    } else {\n      setIsLoading(false); // Если токена нет, устанавливаем загрузку в false\n    }\n  }, []);\n\n  // Запрос данных пользователя по токену\n  const fetchUserData = async token => {\n    try {\n      const response = await fetch('/api/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка аутентификации. Пожалуйста, войдите снова.');\n      }\n      const data = await response.json();\n      setUser({\n        id: data.id,\n        name: data.username,\n        role: data.role\n      });\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      localStorage.removeItem('token'); // Удаляем невалидный токен\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  // Обработка ответа от API при аутентификации (логин/регистрация)\n  const handleAuthResponse = async response => {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Ошибка при аутентификации');\n    }\n    if (data.user && data.user.id) {\n      setUser({\n        id: data.user.id,\n        name: data.user.username,\n        role: data.user.role\n      });\n      localStorage.setItem('token', data.token); // Сохраняем токен в localStorage\n    } else {\n      throw new Error('Данные пользователя не получены');\n    }\n  };\n\n  // Аутентификация пользователя\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      await handleAuthResponse(response);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  // Регистрация нового пользователя\n  const register = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      await handleAuthResponse(response);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  // Выход пользователя из системы\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token'); // Удаляем токен из localStorage\n    setError(null);\n    setIsLoading(false);\n  };\n\n  // Предоставляем данные и методы для управления аутентификацией через контекст\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"caAZa649wyY9nHJT6au393y4yCs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","error","setError","token","localStorage","getItem","fetchUserData","response","fetch","headers","ok","Error","data","json","id","name","username","role","message","removeItem","handleAuthResponse","setItem","login","password","method","body","JSON","stringify","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создаем контекст аутентификации\nexport const AuthContext = createContext(null);\n\n// Хук для удобного доступа к контексту аутентификации\nexport const useAuth = () => useContext(AuthContext);\n\n// Провайдер для контекста аутентификации, управляющий состоянием аутентификации\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // Состояние текущего пользователя\n  const [isLoading, setIsLoading] = useState(true); // Индикатор загрузки\n  const [error, setError] = useState(null); // Сообщения об ошибках\n\n  useEffect(() => {\n    // Проверка наличия токена при монтировании компонента\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData(token);\n    } else {\n      setIsLoading(false); // Если токена нет, устанавливаем загрузку в false\n    }\n  }, []);\n\n  // Запрос данных пользователя по токену\n  const fetchUserData = async (token) => {\n    try {\n      const response = await fetch('/api/users/me', {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка аутентификации. Пожалуйста, войдите снова.');\n      }\n\n      const data = await response.json();\n      setUser({ id: data.id, name: data.username, role: data.role });\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      localStorage.removeItem('token'); // Удаляем невалидный токен\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  // Обработка ответа от API при аутентификации (логин/регистрация)\n  const handleAuthResponse = async (response) => {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Ошибка при аутентификации');\n    }\n\n    if (data.user && data.user.id) {\n      setUser({\n        id: data.user.id,\n        name: data.user.username,\n        role: data.user.role,\n      });\n      localStorage.setItem('token', data.token); // Сохраняем токен в localStorage\n    } else {\n      throw new Error('Данные пользователя не получены');\n    }\n  };\n\n  // Аутентификация пользователя\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n\n      await handleAuthResponse(response);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  // Регистрация нового пользователя\n  const register = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n\n      await handleAuthResponse(response);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  // Выход пользователя из системы\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token'); // Удаляем токен из localStorage\n    setError(null);\n    setIsLoading(false);\n  };\n\n  // Предоставляем данные и методы для управления аутентификацией через контекст\n  return (\n    <AuthContext.Provider value={{ user, isLoading, error, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}