{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // Добавлено состояние для сообщений об успехе\n\n  const handleAuthResponse = async response => {\n    if (!response.ok) {\n      const errData = await response.json();\n      throw new Error(errData.message || 'Произошла ошибка при обработке запроса.');\n    }\n    return response.json();\n  };\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Очистка предыдущих сообщений об успехе\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await handleAuthResponse(response);\n      setUser({\n        name: username,\n        role: data.role\n      });\n      localStorage.setItem('token', data.token);\n      setSuccessMessage('Вход выполнен успешно.'); // Установка сообщения об успехе\n    } catch (error) {\n      setError(error.message);\n      setUser(null); // Очистка данных пользователя в случае ошибки\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Очистка предыдущих сообщений об успехе\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await handleAuthResponse(response);\n      setUser({\n        name: username,\n        role: data.role\n      });\n      localStorage.setItem('token', data.token);\n      setSuccessMessage('Регистрация прошла успешно.'); // Установка сообщения об успехе\n    } catch (error) {\n      setError(error.message);\n      setUser(null); // Очистка данных пользователя в случае ошибки\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    setSuccessMessage(null); // Очистка сообщений об успехе при выходе\n    setError(null); // Очистка ошибок при выходе\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      successMessage,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"6cKN0c01h+JvE54M0KIaa1tXeDo=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","error","setError","successMessage","setSuccessMessage","handleAuthResponse","response","ok","errData","json","Error","message","login","username","password","fetch","method","headers","body","JSON","stringify","data","name","role","localStorage","setItem","token","register","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nexport const AuthContext = createContext(null);\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // Добавлено состояние для сообщений об успехе\n\n  const handleAuthResponse = async (response) => {\n    if (!response.ok) {\n      const errData = await response.json();\n      throw new Error(errData.message || 'Произошла ошибка при обработке запроса.');\n    }\n    return response.json();\n  };\n\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Очистка предыдущих сообщений об успехе\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await handleAuthResponse(response);\n      setUser({ name: username, role: data.role });\n      localStorage.setItem('token', data.token);\n      setSuccessMessage('Вход выполнен успешно.'); // Установка сообщения об успехе\n    } catch (error) {\n      setError(error.message);\n      setUser(null); // Очистка данных пользователя в случае ошибки\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Очистка предыдущих сообщений об успехе\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await handleAuthResponse(response);\n      setUser({ name: username, role: data.role });\n      localStorage.setItem('token', data.token);\n      setSuccessMessage('Регистрация прошла успешно.'); // Установка сообщения об успехе\n    } catch (error) {\n    setError(error.message);\n    setUser(null); // Очистка данных пользователя в случае ошибки\n    } finally {\n    setIsLoading(false);\n    }\n    };\n    \n    const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    setSuccessMessage(null); // Очистка сообщений об успехе при выходе\n    setError(null); // Очистка ошибок при выходе\n    };\n    \n    return (\n    <AuthContext.Provider value={{user,isLoading, error,successMessage,login,register,logout  }}>\n      {children} \n    </AuthContext.Provider>\n    );\n    };\n    export default AuthContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}