{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n// Хук для удобного использования контекста в компонентах\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null); // Состояние текущего пользователя\n  const [isLoading, setIsLoading] = useState(false); // Индикатор загрузки\n  const [error, setError] = useState(null); // Сообщения об ошибках\n\n  // Проверка наличия токена при монтировании компонента\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData(token);\n    }\n  }, []);\n\n  // Получение данных пользователя по токену\n  const fetchUserData = async token => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка аутентификации. Пожалуйста, войдите снова.');\n      }\n      const data = await response.json();\n      setUser({\n        name: data.username,\n        role: data.role\n      });\n    } catch (error) {\n      setError(error.message);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Обработка ответа при аутентификации\n  const handleAuthResponse = async response => {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Ошибка при аутентификации');\n    }\n    return data;\n  };\n\n  // Функция для входа в систему\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await handleAuthResponse(response);\n      setUser({\n        name: data.username,\n        role: data.role\n      });\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для регистрации пользователя\n  const register = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await handleAuthResponse(response);\n      setUser({\n        name: data.username,\n        role: data.role\n      });\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для выхода из системы\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    setError(null);\n  };\n\n  // Предоставление состояния и функций через контекст\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"22Gu3e8oDyYwi96lqvZNC1XHc+U=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","error","setError","token","localStorage","getItem","fetchUserData","response","fetch","headers","ok","Error","data","json","name","username","role","message","removeItem","handleAuthResponse","login","password","method","body","JSON","stringify","setItem","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nexport const AuthContext = createContext(null);\n\n// Хук для удобного использования контекста в компонентах\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // Состояние текущего пользователя\n  const [isLoading, setIsLoading] = useState(false); // Индикатор загрузки\n  const [error, setError] = useState(null); // Сообщения об ошибках\n\n  // Проверка наличия токена при монтировании компонента\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData(token);\n    }\n  }, []);\n\n  // Получение данных пользователя по токену\n  const fetchUserData = async (token) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка аутентификации. Пожалуйста, войдите снова.');\n      }\n\n      const data = await response.json();\n      setUser({ name: data.username, role: data.role });\n    } catch (error) {\n      setError(error.message);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Обработка ответа при аутентификации\n  const handleAuthResponse = async (response) => {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Ошибка при аутентификации');\n    }\n    return data;\n  };\n\n  // Функция для входа в систему\n  const login = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await handleAuthResponse(response);\n      setUser({ name: data.username, role: data.role });\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для регистрации пользователя\n  const register = async (username, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await handleAuthResponse(response);\n      setUser({ name: data.username, role: data.role });\n      localStorage.setItem('token', data.token);\n    } catch (error) {\n      setError(error.message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для выхода из системы\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    setError(null);\n  };\n\n  // Предоставление состояния и функций через контекст\n  return (\n    <AuthContext.Provider value={{ user, isLoading, error, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}