{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n// Функции для взаимодействия с API\nconst authApi = {\n  register: async (username, email, password) => {\n    const response = await fetch('/api/users/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    return response;\n  },\n  login: async (username, password) => {\n    const response = await fetch('/api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    return response;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, setAuthState] = useState({\n    token: null,\n    user: null,\n    isLoading: false,\n    error: null\n  });\n\n  // Обновление состояния аутентификации\n  const updateAuthState = useCallback(updates => {\n    setAuthState(prevState => ({\n      ...prevState,\n      ...updates\n    }));\n  }, []);\n\n  // Регистрация пользователя\n  const register = useCallback(async (username, email, password) => {\n    updateAuthState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await authApi.register(username, email, password);\n      if (!response.ok) {\n        const errMessage = await response.text();\n        throw new Error(errMessage || 'Registration failed');\n      }\n      const {\n        token,\n        user\n      } = await response.json();\n      updateAuthState({\n        token,\n        user,\n        isLoading: false\n      });\n    } catch (error) {\n      updateAuthState({\n        isLoading: false,\n        error: error.message\n      });\n    }\n  }, [updateAuthState]);\n\n  // Вход пользователя\n  const login = useCallback(async (username, password) => {\n    updateAuthState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await authApi.login(username, password);\n      if (!response.ok) {\n        const errMessage = await response.text();\n        throw new Error(errMessage || 'Login failed');\n      }\n      const {\n        token,\n        user\n      } = await response.json();\n      updateAuthState({\n        token,\n        user,\n        isLoading: false\n      });\n    } catch (error) {\n      updateAuthState({\n        isLoading: false,\n        error: error.message\n      });\n    }\n  }, [updateAuthState]);\n\n  // Выход пользователя\n  const logout = useCallback(() => {\n    updateAuthState({\n      token: null,\n      user: null,\n      isLoading: false,\n      error: null\n    });\n  }, [updateAuthState]);\n\n  // Значение контекста\n  const contextValue = {\n    ...authState,\n    login,\n    logout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для доступа к контексту аутентификации\n_s(AuthProvider, \"5x97wWAIhSlDayxA/B4Zjjx+vSU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","jsxDEV","_jsxDEV","AuthContext","authApi","register","username","email","password","response","fetch","method","headers","body","JSON","stringify","login","AuthProvider","children","_s","authState","setAuthState","token","user","isLoading","error","updateAuthState","updates","prevState","ok","errMessage","text","Error","json","message","logout","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthContext/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback } from 'react';\n\nexport const AuthContext = createContext(null);\n\n// Функции для взаимодействия с API\nconst authApi = {\n  register: async (username, email, password) => {\n    const response = await fetch('/api/users/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, email, password }),\n    });\n    return response;\n  },\n  login: async (username, password) => {\n    const response = await fetch('/api/users/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    });\n    return response;\n  },\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [authState, setAuthState] = useState({\n    token: null,\n    user: null,\n    isLoading: false,\n    error: null,\n  });\n\n  // Обновление состояния аутентификации\n  const updateAuthState = useCallback((updates) => {\n    setAuthState((prevState) => ({ ...prevState, ...updates }));\n  }, []);\n\n  // Регистрация пользователя\n  const register = useCallback(async (username, email, password) => {\n    updateAuthState({ isLoading: true, error: null });\n    try {\n      const response = await authApi.register(username, email, password);\n\n      if (!response.ok) {\n        const errMessage = await response.text();\n        throw new Error(errMessage || 'Registration failed');\n      }\n\n      const { token, user } = await response.json();\n      updateAuthState({ token, user, isLoading: false });\n    } catch (error) {\n      updateAuthState({ isLoading: false, error: error.message });\n    }\n  }, [updateAuthState]);\n\n  // Вход пользователя\n  const login = useCallback(async (username, password) => {\n    updateAuthState({ isLoading: true, error: null });\n    try {\n      const response = await authApi.login(username, password);\n\n      if (!response.ok) {\n        const errMessage = await response.text();\n        throw new Error(errMessage || 'Login failed');\n      }\n\n      const { token, user } = await response.json();\n      updateAuthState({ token, user, isLoading: false });\n    } catch (error) {\n      updateAuthState({ isLoading: false, error: error.message });\n    }\n  }, [updateAuthState]);\n\n  // Выход пользователя\n  const logout = useCallback(() => {\n    updateAuthState({ token: null, user: null, isLoading: false, error: null });\n  }, [updateAuthState]);\n\n  // Значение контекста\n  const contextValue = {\n    ...authState,\n    login,\n    logout,\n    register,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для доступа к контексту аутентификации\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAE9C;AACA,MAAMO,OAAO,GAAG;EACdC,QAAQ,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqB,EAAE;MAClDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,QAAQ;QAAEC,KAAK;QAAEC;MAAS,CAAC;IACpD,CAAC,CAAC;IACF,OAAOC,QAAQ;EACjB,CAAC;EACDO,KAAK,EAAE,MAAAA,CAAOV,QAAQ,EAAEE,QAAQ,KAAK;IACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,QAAQ;QAAEE;MAAS,CAAC;IAC7C,CAAC,CAAC;IACF,OAAOC,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC;IACzCwB,KAAK,EAAE,IAAI;IACXC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACA,MAAMC,eAAe,GAAG1B,WAAW,CAAE2B,OAAO,IAAK;IAC/CN,YAAY,CAAEO,SAAS,KAAM;MAAE,GAAGA,SAAS;MAAE,GAAGD;IAAQ,CAAC,CAAC,CAAC;EAC7D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMtB,QAAQ,GAAGL,WAAW,CAAC,OAAOM,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAChEkB,eAAe,CAAC;MAAEF,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACjD,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAML,OAAO,CAACC,QAAQ,CAACC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC;MAElE,IAAI,CAACC,QAAQ,CAACoB,EAAE,EAAE;QAChB,MAAMC,UAAU,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;QACxC,MAAM,IAAIC,KAAK,CAACF,UAAU,IAAI,qBAAqB,CAAC;MACtD;MAEA,MAAM;QAAER,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAMd,QAAQ,CAACwB,IAAI,CAAC,CAAC;MAC7CP,eAAe,CAAC;QAAEJ,KAAK;QAAEC,IAAI;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,eAAe,CAAC;QAAEF,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACS;MAAQ,CAAC,CAAC;IAC7D;EACF,CAAC,EAAE,CAACR,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMV,KAAK,GAAGhB,WAAW,CAAC,OAAOM,QAAQ,EAAEE,QAAQ,KAAK;IACtDkB,eAAe,CAAC;MAAEF,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACjD,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAML,OAAO,CAACY,KAAK,CAACV,QAAQ,EAAEE,QAAQ,CAAC;MAExD,IAAI,CAACC,QAAQ,CAACoB,EAAE,EAAE;QAChB,MAAMC,UAAU,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;QACxC,MAAM,IAAIC,KAAK,CAACF,UAAU,IAAI,cAAc,CAAC;MAC/C;MAEA,MAAM;QAAER,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAMd,QAAQ,CAACwB,IAAI,CAAC,CAAC;MAC7CP,eAAe,CAAC;QAAEJ,KAAK;QAAEC,IAAI;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,eAAe,CAAC;QAAEF,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACS;MAAQ,CAAC,CAAC;IAC7D;EACF,CAAC,EAAE,CAACR,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMS,MAAM,GAAGnC,WAAW,CAAC,MAAM;IAC/B0B,eAAe,CAAC;MAAEJ,KAAK,EAAE,IAAI;MAAEC,IAAI,EAAE,IAAI;MAAEC,SAAS,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;EAC7E,CAAC,EAAE,CAACC,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMU,YAAY,GAAG;IACnB,GAAGhB,SAAS;IACZJ,KAAK;IACLmB,MAAM;IACN9B;EACF,CAAC;EAED,oBACEH,OAAA,CAACC,WAAW,CAACkC,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAlB,QAAA,EACvCA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAvB,EAAA,CArEaF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAsEzB,OAAO,MAAM2B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM9C,UAAU,CAACI,WAAW,CAAC;AAAA;AAAC0C,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}