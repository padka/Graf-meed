{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Select, MenuItem, InputLabel, FormHelperText, FormControl, Chip, OutlinedInput } from '@mui/material';\nimport { FieldTitle, useInput, useChoicesContext, useChoices } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { LinearProgress } from '../layout';\nimport { Labeled } from '../Labeled';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport var SelectArrayInput = function (props) {\n  var _a;\n  var choicesProp = props.choices,\n    className = props.className,\n    create = props.create,\n    createLabel = props.createLabel,\n    createValue = props.createValue,\n    _b = props.disableValue,\n    disableValue = _b === void 0 ? 'disabled' : _b,\n    format = props.format,\n    helperText = props.helperText,\n    label = props.label,\n    isFetchingProp = props.isFetching,\n    isLoadingProp = props.isLoading,\n    margin = props.margin,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onCreate = props.onCreate,\n    _c = props.options,\n    options = _c === void 0 ? defaultOptions : _c,\n    _d = props.optionText,\n    optionText = _d === void 0 ? 'name' : _d,\n    _e = props.optionValue,\n    optionValue = _e === void 0 ? 'id' : _e,\n    parse = props.parse,\n    resourceProp = props.resource,\n    _f = props.size,\n    size = _f === void 0 ? 'small' : _f,\n    sourceProp = props.source,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    variant = props.variant,\n    rest = __rest(props, [\"choices\", \"className\", \"create\", \"createLabel\", \"createValue\", \"disableValue\", \"format\", \"helperText\", \"label\", \"isFetching\", \"isLoading\", \"margin\", \"onBlur\", \"onChange\", \"onCreate\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"size\", \"source\", \"translateChoice\", \"validate\", \"variant\"]);\n  var inputLabel = useRef(null);\n  var _g = useChoicesContext({\n      choices: choicesProp,\n      isLoading: isLoadingProp,\n      isFetching: isFetchingProp,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _g.allChoices,\n    isLoading = _g.isLoading,\n    fetchError = _g.error,\n    source = _g.source,\n    resource = _g.resource,\n    isFromReference = _g.isFromReference;\n  var _h = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      disableValue: disableValue,\n      translateChoice: translateChoice !== null && translateChoice !== void 0 ? translateChoice : !isFromReference\n    }),\n    getChoiceText = _h.getChoiceText,\n    getChoiceValue = _h.getChoiceValue,\n    getDisableValue = _h.getDisableValue;\n  var _j = useInput(__assign({\n      format: format,\n      onBlur: onBlur,\n      onChange: onChange,\n      parse: parse,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _j.field,\n    isRequired = _j.isRequired,\n    _k = _j.fieldState,\n    error = _k.error,\n    invalid = _k.invalid,\n    isTouched = _k.isTouched,\n    isSubmitted = _j.formState.isSubmitted,\n    id = _j.id;\n  var handleChange = useCallback(function (eventOrChoice) {\n    // We might receive an event from the mui component\n    // In this case, it will be the choice id\n    if (eventOrChoice === null || eventOrChoice === void 0 ? void 0 : eventOrChoice.target) {\n      // when used with different IDs types, unselection leads to double selection with both types\n      // instead of the value being removed from the array\n      // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n      // this snippet removes a value if it is present twice\n      eventOrChoice.target.value = eventOrChoice.target.value.reduce(function (acc, value) {\n        // eslint-disable-next-line eqeqeq\n        var index = acc.findIndex(function (v) {\n          return v == value;\n        });\n        return index < 0 ? __spreadArray(__spreadArray([], acc, true), [value], false) : __spreadArray(__spreadArray([], acc.slice(0, index), true), acc.slice(index + 1), true);\n      }, []);\n      field.onChange(eventOrChoice);\n    } else {\n      // Or we might receive a choice directly, for instance a newly created one\n      field.onChange(__spreadArray(__spreadArray([], field.value || [], true), [getChoiceValue(eventOrChoice)], false));\n    }\n  }, [field, getChoiceValue]);\n  var _l = useSupportCreateSuggestion({\n      create: create,\n      createLabel: createLabel,\n      createValue: createValue,\n      handleChange: handleChange,\n      onCreate: onCreate,\n      optionText: optionText\n    }),\n    getCreateItem = _l.getCreateItem,\n    handleChangeWithCreateSupport = _l.handleChange,\n    createElement = _l.createElement;\n  var createItem = create || onCreate ? getCreateItem() : null;\n  var finalChoices = create || onCreate ? __spreadArray(__spreadArray([], allChoices || [], true), [createItem], false) : allChoices || [];\n  var renderMenuItemOption = useCallback(function (choice) {\n    return !!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id && typeof optionText === 'function' ? createItem.name : getChoiceText(choice);\n  }, [createItem, getChoiceText, optionText]);\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: getDisableValue(choice)\n    }, renderMenuItemOption(!!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id ? createItem : choice)) : null;\n  }, [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]);\n  if (isLoading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: clsx('ra-input', \"ra-input-\".concat(source), className),\n      isRequired: isRequired\n    }, React.createElement(LinearProgress, null));\n  }\n  // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n  var finalValue = Array.isArray((_a = field.value) !== null && _a !== void 0 ? _a : []) ? field.value : field.value ? [field.value] : [];\n  var outlinedInputProps = variant === 'outlined' ? {\n    input: React.createElement(OutlinedInput, {\n      id: \"select-multiple-chip\",\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      })\n    })\n  } : {};\n  var renderHelperText = !!fetchError || helperText !== false || (isTouched || isSubmitted) && invalid;\n  return React.createElement(React.Fragment, null, React.createElement(StyledFormControl, __assign({\n    margin: margin,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    error: fetchError || (isTouched || isSubmitted) && invalid,\n    variant: variant\n  }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n    ref: inputLabel,\n    id: \"\".concat(id, \"-outlined-label\"),\n    htmlFor: id\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(Select, __assign({\n    id: id,\n    autoWidth: true,\n    labelId: \"\".concat(id, \"-outlined-label\"),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    multiple: true,\n    error: !!fetchError || (isTouched || isSubmitted) && invalid,\n    renderValue: function (selected) {\n      return React.createElement(\"div\", {\n        className: SelectArrayInputClasses.chips\n      }, (Array.isArray(selected) ? selected : []).map(function (item) {\n        return (allChoices || []).find(\n        // eslint-disable-next-line eqeqeq\n        function (choice) {\n          return getChoiceValue(choice) == item;\n        });\n      }).filter(function (item) {\n        return !!item;\n      }).map(function (item) {\n        return React.createElement(Chip, {\n          key: getChoiceValue(item),\n          label: renderMenuItemOption(item),\n          className: SelectArrayInputClasses.chip,\n          size: \"small\"\n        });\n      }));\n    },\n    \"data-testid\": \"selectArray\",\n    size: size\n  }, field, options, {\n    onChange: handleChangeWithCreateSupport,\n    value: finalValue\n  }, outlinedInputProps), finalChoices.map(renderMenuItem)), renderHelperText ? React.createElement(FormHelperText, {\n    error: fetchError || isTouched && !!error\n  }, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted || fetchError,\n    error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n    helperText: helperText\n  })) : null), createElement);\n};\nSelectArrayInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  disableValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nvar sanitizeRestProps = function (_a) {\n  var alwaysOn = _a.alwaysOn,\n    choices = _a.choices,\n    classNamInputWithOptionsPropse = _a.classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst = _a.componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching = _a.crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne = _a.crudGetOInputWithOptionsPropsne,\n    defaultValue = _a.defaultValue,\n    disableValue = _a.disableValue,\n    emptyText = _a.emptyText,\n    enableGetChoices = _a.enableGetChoices,\n    filter = _a.filter,\n    filterToQuery = _a.filterToQuery,\n    formClassName = _a.formClassName,\n    initializeForm = _a.initializeForm,\n    initialValue = _a.initialValue,\n    input = _a.input,\n    isRequired = _a.isRequired,\n    label = _a.label,\n    limitChoicesToValue = _a.limitChoicesToValue,\n    loaded = _a.loaded,\n    locale = _a.locale,\n    meta = _a.meta,\n    onChange = _a.onChange,\n    options = _a.options,\n    optionValue = _a.optionValue,\n    optionText = _a.optionText,\n    perPage = _a.perPage,\n    record = _a.record,\n    reference = _a.reference,\n    resource = _a.resource,\n    setFilter = _a.setFilter,\n    setPagination = _a.setPagination,\n    setSort = _a.setSort,\n    sort = _a.sort,\n    source = _a.source,\n    textAlign = _a.textAlign,\n    translate = _a.translate,\n    translateChoice = _a.translateChoice,\n    validation = _a.validation,\n    rest = __rest(_a, [\"alwaysOn\", \"choices\", \"classNamInputWithOptionsPropse\", \"componenInputWithOptionsPropst\", \"crudGetMInputWithOptionsPropsatching\", \"crudGetOInputWithOptionsPropsne\", \"defaultValue\", \"disableValue\", \"emptyText\", \"enableGetChoices\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"initialValue\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"loaded\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n  return rest;\n};\nvar PREFIX = 'RaSelectArrayInput';\nexport var SelectArrayInputClasses = {\n  chips: \"\".concat(PREFIX, \"-chips\"),\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledFormControl = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    minWidth: theme.spacing(20)\n  }, _b[theme.breakpoints.down('sm')] = {\n    width: '100%'\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chips)] = {\n    display: 'flex',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chip)] = {\n    marginTop: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5)\n  }, _b;\n});\nvar defaultOptions = {};","map":{"version":3,"names":["React","styled","useCallback","useRef","PropTypes","clsx","Select","MenuItem","InputLabel","FormHelperText","FormControl","Chip","OutlinedInput","FieldTitle","useInput","useChoicesContext","useChoices","InputHelperText","LinearProgress","Labeled","useSupportCreateSuggestion","SelectArrayInput","props","choicesProp","choices","className","create","createLabel","createValue","_b","disableValue","format","helperText","label","isFetchingProp","isFetching","isLoadingProp","isLoading","margin","onBlur","onChange","onCreate","_c","options","defaultOptions","_d","optionText","_e","optionValue","parse","resourceProp","resource","_f","size","sourceProp","source","translateChoice","validate","variant","rest","__rest","inputLabel","_g","allChoices","fetchError","error","isFromReference","_h","getChoiceText","getChoiceValue","getDisableValue","_j","__assign","field","isRequired","_k","fieldState","invalid","isTouched","isSubmitted","formState","id","handleChange","eventOrChoice","target","value","reduce","acc","index","findIndex","v","__spreadArray","slice","_l","getCreateItem","handleChangeWithCreateSupport","createElement","createItem","finalChoices","renderMenuItemOption","choice","name","renderMenuItem","key","disabled","concat","finalValue","Array","isArray","_a","outlinedInputProps","input","renderHelperText","Fragment","StyledFormControl","sanitizeRestProps","ref","htmlFor","autoWidth","labelId","multiple","renderValue","selected","SelectArrayInputClasses","chips","map","item","find","filter","chip","touched","message","propTypes","arrayOf","object","string","children","node","oneOfType","bool","element","func","alwaysOn","classNamInputWithOptionsPropse","componenInputWithOptionsPropst","crudGetMInputWithOptionsPropsatching","crudGetOInputWithOptionsPropsne","defaultValue","emptyText","enableGetChoices","filterToQuery","formClassName","initializeForm","initialValue","limitChoicesToValue","loaded","locale","meta","perPage","record","reference","setFilter","setPagination","setSort","sort","textAlign","translate","validation","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","breakpoints","down","width","display","flexWrap","marginTop","marginRight"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/node_modules/ra-ui-materialui/src/input/SelectArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    Select,\n    SelectProps,\n    MenuItem,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    Chip,\n    OutlinedInput,\n} from '@mui/material';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    useInput,\n    useChoicesContext,\n    useChoices,\n    RaRecord,\n} from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { FormControlProps } from '@mui/material/FormControl';\n\nimport { LinearProgress } from '../layout';\nimport { CommonInputProps } from './CommonInputProps';\nimport { Labeled } from '../Labeled';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\n\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport const SelectArrayInput = (props: SelectArrayInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        disableValue = 'disabled',\n        format,\n        helperText,\n        label,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        margin,\n        onBlur,\n        onChange,\n        onCreate,\n        options = defaultOptions,\n        optionText = 'name',\n        optionValue = 'id',\n        parse,\n        resource: resourceProp,\n        size = 'small',\n        source: sourceProp,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const inputLabel = useRef(null);\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        source,\n        resource,\n        isFromReference,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText,\n        optionValue,\n        disableValue,\n        translateChoice: translateChoice ?? !isFromReference,\n    });\n\n    const {\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n    } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                // when used with different IDs types, unselection leads to double selection with both types\n                // instead of the value being removed from the array\n                // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n                // this snippet removes a value if it is present twice\n                eventOrChoice.target.value = eventOrChoice.target.value.reduce(\n                    (acc, value) => {\n                        // eslint-disable-next-line eqeqeq\n                        const index = acc.findIndex(v => v == value);\n                        return index < 0\n                            ? [...acc, value]\n                            : [...acc.slice(0, index), ...acc.slice(index + 1)];\n                    },\n                    []\n                );\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange([\n                    ...(field.value || []),\n                    getChoiceValue(eventOrChoice),\n                ]);\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    const finalChoices =\n        create || onCreate\n            ? [...(allChoices || []), createItem]\n            : allChoices || [];\n\n    const renderMenuItemOption = useCallback(\n        choice =>\n            !!createItem &&\n            choice?.id === createItem.id &&\n            typeof optionText === 'function'\n                ? createItem.name\n                : getChoiceText(choice),\n        [createItem, getChoiceText, optionText]\n    );\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <Labeled\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n    const finalValue = Array.isArray(field.value ?? [])\n        ? field.value\n        : field.value\n        ? [field.value]\n        : [];\n\n    const outlinedInputProps =\n        variant === 'outlined'\n            ? {\n                  input: (\n                      <OutlinedInput\n                          id=\"select-multiple-chip\"\n                          label={\n                              <FieldTitle\n                                  label={label}\n                                  source={source}\n                                  resource={resource}\n                                  isRequired={isRequired}\n                              />\n                          }\n                      />\n                  ),\n              }\n            : {};\n    const renderHelperText =\n        !!fetchError ||\n        helperText !== false ||\n        ((isTouched || isSubmitted) && invalid);\n\n    return (\n        <>\n            <StyledFormControl\n                margin={margin}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                error={fetchError || ((isTouched || isSubmitted) && invalid)}\n                variant={variant}\n                {...sanitizeRestProps(rest)}\n            >\n                <InputLabel\n                    ref={inputLabel}\n                    id={`${id}-outlined-label`}\n                    htmlFor={id}\n                >\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                </InputLabel>\n                <Select\n                    id={id}\n                    autoWidth\n                    labelId={`${id}-outlined-label`}\n                    label={\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resource}\n                            isRequired={isRequired}\n                        />\n                    }\n                    multiple\n                    error={\n                        !!fetchError || ((isTouched || isSubmitted) && invalid)\n                    }\n                    renderValue={(selected: any[]) => (\n                        <div className={SelectArrayInputClasses.chips}>\n                            {(Array.isArray(selected) ? selected : [])\n                                .map(item =>\n                                    (allChoices || []).find(\n                                        // eslint-disable-next-line eqeqeq\n                                        choice => getChoiceValue(choice) == item\n                                    )\n                                )\n                                .filter(item => !!item)\n                                .map(item => (\n                                    <Chip\n                                        key={getChoiceValue(item)}\n                                        label={renderMenuItemOption(item)}\n                                        className={SelectArrayInputClasses.chip}\n                                        size=\"small\"\n                                    />\n                                ))}\n                        </div>\n                    )}\n                    data-testid=\"selectArray\"\n                    size={size}\n                    {...field}\n                    {...options}\n                    onChange={handleChangeWithCreateSupport}\n                    value={finalValue}\n                    {...outlinedInputProps}\n                >\n                    {finalChoices.map(renderMenuItem)}\n                </Select>\n                {renderHelperText ? (\n                    <FormHelperText\n                        error={fetchError || (isTouched && !!error)}\n                    >\n                        <InputHelperText\n                            touched={isTouched || isSubmitted || fetchError}\n                            error={error?.message || fetchError?.message}\n                            helperText={helperText}\n                        />\n                    </FormHelperText>\n                ) : null}\n            </StyledFormControl>\n            {createElement}\n        </>\n    );\n};\n\nexport type SelectArrayInputProps = ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<CommonInputProps, 'source'> &\n    Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> & {\n        options?: SelectProps;\n        disableValue?: string;\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n\nSelectArrayInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    disableValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nconst sanitizeRestProps = ({\n    alwaysOn,\n    choices,\n    classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne,\n    defaultValue,\n    disableValue,\n    emptyText,\n    enableGetChoices,\n    filter,\n    filterToQuery,\n    formClassName,\n    initializeForm,\n    initialValue,\n    input,\n    isRequired,\n    label,\n    limitChoicesToValue,\n    loaded,\n    locale,\n    meta,\n    onChange,\n    options,\n    optionValue,\n    optionText,\n    perPage,\n    record,\n    reference,\n    resource,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    source,\n    textAlign,\n    translate,\n    translateChoice,\n    validation,\n    ...rest\n}: any) => rest;\n\nconst PREFIX = 'RaSelectArrayInput';\n\nexport const SelectArrayInputClasses = {\n    chips: `${PREFIX}-chips`,\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    minWidth: theme.spacing(20),\n    [theme.breakpoints.down('sm')]: {\n        width: '100%',\n    },\n    [`& .${SelectArrayInputClasses.chips}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n\n    [`& .${SelectArrayInputClasses.chip}`]: {\n        marginTop: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n    },\n}));\n\nconst defaultOptions = {};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}