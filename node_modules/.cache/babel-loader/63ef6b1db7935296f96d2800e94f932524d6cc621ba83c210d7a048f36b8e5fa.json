{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { isValidElement, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport clsx from 'clsx';\nimport { Autocomplete, Chip, TextField, createFilterOptions } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { FieldTitle, useChoicesContext, useInput, useSuggestions, useTimeout, useTranslate, warning, useGetRecordRepresentation, useEvent } from 'ra-core';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nvar defaultFilterOptions = createFilterOptions();\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` and `inputText` props\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)\n * const inputText = (record) => `${record.fullName} (${record.language})`;\n *\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <AutocompleteInput source=\"author\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} inputText={inputText} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the Material UI <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nexport var AutocompleteInput = function (props) {\n  var choicesProp = props.choices,\n    className = props.className,\n    _a = props.clearOnBlur,\n    clearOnBlur = _a === void 0 ? true : _a,\n    _b = props.clearText,\n    clearText = _b === void 0 ? 'ra.action.clear_input_value' : _b,\n    _c = props.closeText,\n    closeText = _c === void 0 ? 'ra.action.close' : _c,\n    create = props.create,\n    createLabel = props.createLabel,\n    createItemLabel = props.createItemLabel,\n    createValue = props.createValue,\n    _d = props.debounce,\n    debounceDelay = _d === void 0 ? 250 : _d,\n    defaultValue = props.defaultValue,\n    emptyText = props.emptyText,\n    _e = props.emptyValue,\n    emptyValue = _e === void 0 ? '' : _e,\n    fieldOverride = props.field,\n    format = props.format,\n    helperText = props.helperText,\n    idOverride = props.id,\n    inputText = props.inputText,\n    isFetchingProp = props.isFetching,\n    isLoadingProp = props.isLoading,\n    isRequiredOverride = props.isRequired,\n    label = props.label,\n    limitChoicesToValue = props.limitChoicesToValue,\n    matchSuggestion = props.matchSuggestion,\n    margin = props.margin,\n    fieldStateOverride = props.fieldState,\n    _f = props.filterToQuery,\n    filterToQueryProp = _f === void 0 ? DefaultFilterToQuery : _f,\n    formStateOverride = props.formState,\n    _g = props.multiple,\n    multiple = _g === void 0 ? false : _g,\n    noOptionsText = props.noOptionsText,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onCreate = props.onCreate,\n    _h = props.openText,\n    openText = _h === void 0 ? 'ra.action.open' : _h,\n    optionText = props.optionText,\n    optionValue = props.optionValue,\n    parse = props.parse,\n    resourceProp = props.resource,\n    shouldRenderSuggestions = props.shouldRenderSuggestions,\n    setFilter = props.setFilter,\n    size = props.size,\n    sourceProp = props.source,\n    _j = props.suggestionLimit,\n    suggestionLimit = _j === void 0 ? Infinity : _j,\n    TextFieldProps = props.TextFieldProps,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    variant = props.variant,\n    onInputChange = props.onInputChange,\n    rest = __rest(props, [\"choices\", \"className\", \"clearOnBlur\", \"clearText\", \"closeText\", \"create\", \"createLabel\", \"createItemLabel\", \"createValue\", \"debounce\", \"defaultValue\", \"emptyText\", \"emptyValue\", \"field\", \"format\", \"helperText\", \"id\", \"inputText\", \"isFetching\", \"isLoading\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"matchSuggestion\", \"margin\", \"fieldState\", \"filterToQuery\", \"formState\", \"multiple\", \"noOptionsText\", \"onBlur\", \"onChange\", \"onCreate\", \"openText\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"shouldRenderSuggestions\", \"setFilter\", \"size\", \"source\", \"suggestionLimit\", \"TextFieldProps\", \"translateChoice\", \"validate\", \"variant\", \"onInputChange\"]);\n  var filterToQuery = useEvent(filterToQueryProp);\n  var _k = useChoicesContext({\n      choices: choicesProp,\n      isFetching: isFetchingProp,\n      isLoading: isLoadingProp,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _k.allChoices,\n    isLoading = _k.isLoading,\n    fetchError = _k.error,\n    resource = _k.resource,\n    source = _k.source,\n    setFilters = _k.setFilters,\n    isFromReference = _k.isFromReference;\n  var translate = useTranslate();\n  var _l = useInput(__assign({\n      defaultValue: defaultValue,\n      id: idOverride,\n      field: fieldOverride,\n      fieldState: fieldStateOverride,\n      formState: formStateOverride,\n      isRequired: isRequiredOverride,\n      onBlur: onBlur,\n      onChange: onChange,\n      parse: parse,\n      format: format,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    id = _l.id,\n    field = _l.field,\n    isRequired = _l.isRequired,\n    _m = _l.fieldState,\n    error = _m.error,\n    invalid = _m.invalid,\n    isTouched = _m.isTouched,\n    isSubmitted = _l.formState.isSubmitted;\n  var finalChoices = useMemo(function () {\n    var _a;\n    // eslint-disable-next-line eqeqeq\n    return emptyText == undefined || isRequired || multiple ? allChoices : [(_a = {}, _a[optionValue || 'id'] = emptyValue, _a[typeof optionText === 'string' ? optionText : 'name'] = translate(emptyText, {\n      _: emptyText\n    }), _a)].concat(allChoices);\n  }, [allChoices, emptyValue, emptyText, isRequired, multiple, optionText, optionValue, translate]);\n  var selectedChoice = useSelectedChoice(field.value, {\n    choices: finalChoices,\n    // @ts-ignore\n    multiple: multiple,\n    optionValue: optionValue\n  });\n  useEffect(function () {\n    // eslint-disable-next-line eqeqeq\n    if (emptyValue == null) {\n      throw new Error(\"emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.\");\n    }\n  }, [emptyValue]);\n  useEffect(function () {\n    // eslint-disable-next-line eqeqeq\n    if (isValidElement(optionText) && emptyText != undefined) {\n      throw new Error(\"optionText of type React element is not supported when setting emptyText\");\n    }\n    // eslint-disable-next-line eqeqeq\n    if (isValidElement(optionText) && inputText == undefined) {\n      throw new Error(\"\\nIf you provided a React element for the optionText prop, you must also provide the inputText prop (used for the text input)\");\n    }\n    if (isValidElement(optionText) && !isFromReference &&\n    // eslint-disable-next-line eqeqeq\n    matchSuggestion == undefined) {\n      throw new Error(\"\\nIf you provided a React element for the optionText prop, you must also provide the matchSuggestion prop (used to match the user input with a choice)\");\n    }\n  }, [optionText, inputText, matchSuggestion, emptyText, isFromReference]);\n  useEffect(function () {\n    warning( /* eslint-disable eqeqeq */\n    shouldRenderSuggestions != undefined && noOptionsText == undefined, \"When providing a shouldRenderSuggestions function, we recommend you also provide the noOptionsText prop and set it to a text explaining users why no options are displayed. It supports translation keys.\");\n    /* eslint-enable eqeqeq */\n  }, [shouldRenderSuggestions, noOptionsText]);\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var _o = useSuggestions({\n      choices: finalChoices,\n      limitChoicesToValue: limitChoicesToValue,\n      matchSuggestion: matchSuggestion,\n      optionText: optionText !== null && optionText !== void 0 ? optionText : isFromReference ? getRecordRepresentation : undefined,\n      optionValue: optionValue,\n      selectedItem: selectedChoice,\n      suggestionLimit: suggestionLimit,\n      translateChoice: translateChoice !== null && translateChoice !== void 0 ? translateChoice : !isFromReference\n    }),\n    getChoiceText = _o.getChoiceText,\n    getChoiceValue = _o.getChoiceValue,\n    getSuggestions = _o.getSuggestions;\n  var _p = useState(''),\n    filterValue = _p[0],\n    setFilterValue = _p[1];\n  var handleChange = function (newValue) {\n    var _a, _b;\n    if (multiple) {\n      if (Array.isArray(newValue)) {\n        field.onChange(newValue.map(getChoiceValue), newValue);\n      } else {\n        field.onChange(__spreadArray(__spreadArray([], (_a = field.value) !== null && _a !== void 0 ? _a : [], true), [getChoiceValue(newValue)], false), newValue);\n      }\n    } else {\n      field.onChange((_b = getChoiceValue(newValue)) !== null && _b !== void 0 ? _b : emptyValue, newValue);\n    }\n  };\n  // eslint-disable-next-line\n  var debouncedSetFilter = useCallback(debounce(function (filter) {\n    if (setFilter) {\n      return setFilter(filter);\n    }\n    if (choicesProp) {\n      return;\n    }\n    setFilters(filterToQuery(filter), undefined, true);\n  }, debounceDelay), [debounceDelay, setFilters, setFilter]);\n  // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n  var currentValue = useRef(field.value);\n  useEffect(function () {\n    if (!isEqual(currentValue.current, field.value)) {\n      currentValue.current = field.value;\n      debouncedSetFilter('');\n    }\n  }, [field.value]); // eslint-disable-line\n  var _q = useSupportCreateSuggestion({\n      create: create,\n      createLabel: createLabel,\n      createItemLabel: createItemLabel,\n      createValue: createValue,\n      handleChange: handleChange,\n      filter: filterValue,\n      onCreate: onCreate,\n      optionText: optionText\n    }),\n    getCreateItem = _q.getCreateItem,\n    handleChangeWithCreateSupport = _q.handleChange,\n    createElement = _q.createElement,\n    createId = _q.createId;\n  var getOptionLabel = useCallback(function (option, isListItem) {\n    if (isListItem === void 0) {\n      isListItem = false;\n    }\n    // eslint-disable-next-line eqeqeq\n    if (option == undefined) {\n      return '';\n    }\n    // Value selected with enter, right from the input\n    if (typeof option === 'string') {\n      return option;\n    }\n    if ((option === null || option === void 0 ? void 0 : option.id) === createId) {\n      return get(option, typeof optionText === 'string' ? optionText : 'name');\n    }\n    if (!isListItem && option[optionValue || 'id'] === emptyValue) {\n      return get(option, typeof optionText === 'string' ? optionText : 'name');\n    }\n    if (!isListItem && inputText !== undefined) {\n      return inputText(option);\n    }\n    return getChoiceText(option);\n  }, [getChoiceText, inputText, createId, optionText, optionValue, emptyValue]);\n  var finalOnBlur = useCallback(function () {\n    if (clearOnBlur && !multiple) {\n      var optionLabel = getOptionLabel(selectedChoice);\n      if (!isEqual(optionLabel, filterValue)) {\n        setFilterValue(optionLabel);\n        debouncedSetFilter('');\n      }\n    }\n    field.onBlur();\n  }, [clearOnBlur, field, getOptionLabel, selectedChoice, filterValue, debouncedSetFilter, multiple]);\n  useEffect(function () {\n    if (!multiple) {\n      var optionLabel = getOptionLabel(selectedChoice);\n      if (typeof optionLabel === 'string') {\n        setFilterValue(optionLabel);\n      } else {\n        throw new Error('When optionText returns a React element, you must also provide the inputText prop');\n      }\n    }\n  }, [getOptionLabel, multiple, selectedChoice]);\n  var handleInputChange = function (event, newInputValue, reason) {\n    if ((event === null || event === void 0 ? void 0 : event.type) === 'change' || !doesQueryMatchSelection(newInputValue)) {\n      setFilterValue(newInputValue);\n      debouncedSetFilter(newInputValue);\n    }\n    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(event, newInputValue, reason);\n  };\n  var doesQueryMatchSelection = useCallback(function (filter) {\n    var selectedItemTexts;\n    if (multiple) {\n      selectedItemTexts = selectedChoice.map(function (item) {\n        return getOptionLabel(item);\n      });\n    } else {\n      selectedItemTexts = [getOptionLabel(selectedChoice)];\n    }\n    return selectedItemTexts.includes(filter);\n  }, [getOptionLabel, multiple, selectedChoice]);\n  var doesQueryMatchSuggestion = useCallback(function (filter) {\n    var hasOption = !!finalChoices ? finalChoices.some(function (choice) {\n      return getOptionLabel(choice) === filter;\n    }) : false;\n    return doesQueryMatchSelection(filter) || hasOption;\n  }, [finalChoices, getOptionLabel, doesQueryMatchSelection]);\n  var filterOptions = function (options, params) {\n    var filteredOptions = isFromReference ||\n    // When used inside a reference, AutocompleteInput shouldn't do the filtering as it's done by the reference input\n    matchSuggestion ||\n    // When using element as optionText (and matchSuggestion), options are filtered by getSuggestions, so they shouldn't be filtered here\n    limitChoicesToValue // When limiting choices to values (why? it's legacy!), options are also filtered by getSuggestions, so they shouldn't be filtered here\n    ? options : defaultFilterOptions(options, params); // Otherwise, we let Material UI's Autocomplete do the filtering\n    // add create option if necessary\n    var inputValue = params.inputValue;\n    if ((onCreate || create) && inputValue !== '' && !doesQueryMatchSuggestion(filterValue)) {\n      filteredOptions = filteredOptions.concat(getCreateItem(inputValue));\n    }\n    return filteredOptions;\n  };\n  var handleAutocompleteChange = function (event, newValue, _reason) {\n    handleChangeWithCreateSupport(newValue != null ? newValue : emptyValue);\n  };\n  var oneSecondHasPassed = useTimeout(1000, filterValue);\n  var suggestions = useMemo(function () {\n    if (!isFromReference && (matchSuggestion || limitChoicesToValue)) {\n      return getSuggestions(filterValue);\n    }\n    return (finalChoices === null || finalChoices === void 0 ? void 0 : finalChoices.slice(0, suggestionLimit)) || [];\n  }, [finalChoices, filterValue, getSuggestions, limitChoicesToValue, matchSuggestion, suggestionLimit, isFromReference]);\n  var isOptionEqualToValue = function (option, value) {\n    return String(getChoiceValue(option)) === String(getChoiceValue(value));\n  };\n  var renderHelperText = !!fetchError || helperText !== false || (isTouched || isSubmitted) && invalid;\n  return React.createElement(React.Fragment, null, React.createElement(StyledAutocomplete, __assign({\n    blurOnSelect: true,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    clearText: translate(clearText, {\n      _: clearText\n    }),\n    closeText: translate(closeText, {\n      _: closeText\n    }),\n    openOnFocus: true,\n    openText: translate(openText, {\n      _: openText\n    }),\n    id: id,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterSelectedOptions: true,\n    renderInput: function (params) {\n      var mergedTextFieldProps = __assign(__assign({}, params.InputProps), TextFieldProps === null || TextFieldProps === void 0 ? void 0 : TextFieldProps.InputProps);\n      return React.createElement(TextField, __assign({\n        name: field.name,\n        label: React.createElement(FieldTitle, {\n          label: label,\n          source: source,\n          resource: resourceProp,\n          isRequired: isRequired\n        }),\n        error: !!fetchError || (isTouched || isSubmitted) && invalid,\n        helperText: renderHelperText ? React.createElement(InputHelperText, {\n          touched: isTouched || isSubmitted || fetchError,\n          error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n          helperText: helperText\n        }) : null,\n        margin: margin,\n        variant: variant,\n        className: AutocompleteInputClasses.textField\n      }, params, {\n        InputProps: mergedTextFieldProps,\n        size: size\n      }));\n    },\n    multiple: multiple,\n    renderTags: function (value, getTagProps) {\n      return value.map(function (option, index) {\n        return React.createElement(Chip, __assign({\n          label: isValidElement(optionText) ? inputText(option) : getChoiceText(option),\n          size: \"small\"\n        }, getTagProps({\n          index: index\n        })));\n      });\n    },\n    noOptionsText: typeof noOptionsText === 'string' ? translate(noOptionsText, {\n      _: noOptionsText\n    }) : noOptionsText,\n    selectOnFocus: true,\n    clearOnBlur: clearOnBlur\n  }, sanitizeInputRestProps(rest), {\n    freeSolo: !!create || !!onCreate,\n    handleHomeEndKeys: !!create || !!onCreate,\n    filterOptions: filterOptions,\n    options: shouldRenderSuggestions == undefined ||\n    // eslint-disable-line eqeqeq\n    shouldRenderSuggestions(filterValue) ? suggestions : [],\n    getOptionLabel: getOptionLabel,\n    inputValue: filterValue,\n    loading: isLoading && (!finalChoices || finalChoices.length === 0) && oneSecondHasPassed,\n    value: selectedChoice,\n    onChange: handleAutocompleteChange,\n    onBlur: finalOnBlur,\n    onInputChange: handleInputChange,\n    renderOption: function (props, record) {\n      props.key = getChoiceValue(record);\n      var optionLabel = getOptionLabel(record, true);\n      return React.createElement(\"li\", __assign({}, props), optionLabel === '' ? ' ' : optionLabel);\n    }\n  })), createElement);\n};\nvar PREFIX = 'RaAutocompleteInput';\nexport var AutocompleteInputClasses = {\n  textField: \"\".concat(PREFIX, \"-textField\")\n};\nvar StyledAutocomplete = styled(Autocomplete, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(AutocompleteInputClasses.textField)] = {\n    minWidth: theme.spacing(20)\n  }, _b;\n});\n/**\n * Returns the selected choice (or choices if multiple) by matching the input value with the choices.\n */\nvar useSelectedChoice = function (value, _a) {\n  var choices = _a.choices,\n    multiple = _a.multiple,\n    optionValue = _a.optionValue;\n  var selectedChoiceRef = useRef(getSelectedItems(choices, value, optionValue, multiple));\n  var _b = useState(function () {\n      return getSelectedItems(choices, value, optionValue, multiple);\n    }),\n    selectedChoice = _b[0],\n    setSelectedChoice = _b[1];\n  // As the selected choices are objects, we want to ensure we pass the same\n  // reference to the Autocomplete as it would reset its filter value otherwise.\n  useEffect(function () {\n    var newSelectedItems = getSelectedItems(choices, value, optionValue, multiple);\n    if (!areSelectedItemsEqual(selectedChoiceRef.current, newSelectedItems, optionValue, multiple)) {\n      selectedChoiceRef.current = newSelectedItems;\n      setSelectedChoice(newSelectedItems);\n    }\n  }, [choices, value, multiple, optionValue]);\n  return selectedChoice || null;\n};\nvar getSelectedItems = function (choices, value, optionValue, multiple) {\n  if (choices === void 0) {\n    choices = [];\n  }\n  if (optionValue === void 0) {\n    optionValue = 'id';\n  }\n  if (multiple) {\n    return (Array.isArray(value !== null && value !== void 0 ? value : []) ? value : [value]).map(function (item) {\n      return choices.find(function (choice) {\n        return String(item) === String(get(choice, optionValue));\n      });\n    }).filter(function (item) {\n      return !!item;\n    });\n  }\n  return choices.find(function (choice) {\n    return String(get(choice, optionValue)) === String(value);\n  }) || '';\n};\nvar areSelectedItemsEqual = function (selectedChoice, newSelectedChoice, optionValue, multiple) {\n  var _a, _b;\n  if (optionValue === void 0) {\n    optionValue = 'id';\n  }\n  if (multiple) {\n    var selectedChoiceArray = (_a = selectedChoice) !== null && _a !== void 0 ? _a : [];\n    var newSelectedChoiceArray_1 = (_b = newSelectedChoice) !== null && _b !== void 0 ? _b : [];\n    if (selectedChoiceArray.length !== newSelectedChoiceArray_1.length) {\n      return false;\n    }\n    var equalityArray = selectedChoiceArray.map(function (choice) {\n      return newSelectedChoiceArray_1.some(function (newChoice) {\n        return get(newChoice, optionValue) === get(choice, optionValue);\n      });\n    });\n    return !equalityArray.some(function (item) {\n      return item === false;\n    });\n  }\n  return get(selectedChoice, optionValue) === get(newSelectedChoice, optionValue);\n};\nvar DefaultFilterToQuery = function (searchText) {\n  return {\n    q: searchText\n  };\n};","map":{"version":3,"names":["React","isValidElement","useCallback","useEffect","useMemo","useRef","useState","debounce","get","isEqual","clsx","Autocomplete","Chip","TextField","createFilterOptions","styled","FieldTitle","useChoicesContext","useInput","useSuggestions","useTimeout","useTranslate","warning","useGetRecordRepresentation","useEvent","useSupportCreateSuggestion","InputHelperText","sanitizeInputRestProps","defaultFilterOptions","AutocompleteInput","props","choicesProp","choices","className","_a","clearOnBlur","_b","clearText","_c","closeText","create","createLabel","createItemLabel","createValue","_d","debounceDelay","defaultValue","emptyText","_e","emptyValue","fieldOverride","field","format","helperText","idOverride","id","inputText","isFetchingProp","isFetching","isLoadingProp","isLoading","isRequiredOverride","isRequired","label","limitChoicesToValue","matchSuggestion","margin","fieldStateOverride","fieldState","_f","filterToQuery","filterToQueryProp","DefaultFilterToQuery","formStateOverride","formState","_g","multiple","noOptionsText","onBlur","onChange","onCreate","_h","openText","optionText","optionValue","parse","resourceProp","resource","shouldRenderSuggestions","setFilter","size","sourceProp","source","_j","suggestionLimit","Infinity","TextFieldProps","translateChoice","validate","variant","onInputChange","rest","__rest","_k","allChoices","fetchError","error","setFilters","isFromReference","translate","_l","__assign","_m","invalid","isTouched","isSubmitted","finalChoices","undefined","_","concat","selectedChoice","useSelectedChoice","value","Error","getRecordRepresentation","_o","selectedItem","getChoiceText","getChoiceValue","getSuggestions","_p","filterValue","setFilterValue","handleChange","newValue","Array","isArray","map","__spreadArray","debouncedSetFilter","filter","currentValue","current","_q","getCreateItem","handleChangeWithCreateSupport","createElement","createId","getOptionLabel","option","isListItem","finalOnBlur","optionLabel","handleInputChange","event","newInputValue","reason","type","doesQueryMatchSelection","selectedItemTexts","item","includes","doesQueryMatchSuggestion","hasOption","some","choice","filterOptions","options","params","filteredOptions","inputValue","handleAutocompleteChange","_reason","oneSecondHasPassed","suggestions","slice","isOptionEqualToValue","String","renderHelperText","Fragment","StyledAutocomplete","blurOnSelect","openOnFocus","filterSelectedOptions","renderInput","mergedTextFieldProps","InputProps","name","touched","message","AutocompleteInputClasses","textField","renderTags","getTagProps","index","selectOnFocus","freeSolo","handleHomeEndKeys","loading","length","renderOption","record","key","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","selectedChoiceRef","getSelectedItems","setSelectedChoice","newSelectedItems","areSelectedItemsEqual","find","newSelectedChoice","selectedChoiceArray","newSelectedChoiceArray_1","equalityArray","newChoice","searchText","q"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/node_modules/ra-ui-materialui/src/input/AutocompleteInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    isValidElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    ReactNode,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport clsx from 'clsx';\nimport {\n    Autocomplete,\n    AutocompleteProps,\n    Chip,\n    TextField,\n    TextFieldProps,\n    createFilterOptions,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    RaRecord,\n    useChoicesContext,\n    useInput,\n    useSuggestions,\n    UseSuggestionsOptions,\n    useTimeout,\n    useTranslate,\n    warning,\n    useGetRecordRepresentation,\n    useEvent,\n} from 'ra-core';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\nconst defaultFilterOptions = createFilterOptions();\n\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` and `inputText` props\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)\n * const inputText = (record) => `${record.fullName} (${record.language})`;\n *\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <AutocompleteInput source=\"author\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} inputText={inputText} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the Material UI <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nexport const AutocompleteInput = <\n    OptionType extends RaRecord = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>(\n    props: AutocompleteInputProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >\n) => {\n    const {\n        choices: choicesProp,\n        className,\n        clearOnBlur = true,\n        clearText = 'ra.action.clear_input_value',\n        closeText = 'ra.action.close',\n        create,\n        createLabel,\n        createItemLabel,\n        createValue,\n        debounce: debounceDelay = 250,\n        defaultValue,\n        emptyText,\n        emptyValue = '',\n        field: fieldOverride,\n        format,\n        helperText,\n        id: idOverride,\n        inputText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        isRequired: isRequiredOverride,\n        label,\n        limitChoicesToValue,\n        matchSuggestion,\n        margin,\n        fieldState: fieldStateOverride,\n        filterToQuery: filterToQueryProp = DefaultFilterToQuery,\n        formState: formStateOverride,\n        multiple = false,\n        noOptionsText,\n        onBlur,\n        onChange,\n        onCreate,\n        openText = 'ra.action.open',\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        shouldRenderSuggestions,\n        setFilter,\n        size,\n        source: sourceProp,\n        suggestionLimit = Infinity,\n        TextFieldProps,\n        translateChoice,\n        validate,\n        variant,\n        onInputChange,\n        ...rest\n    } = props;\n\n    const filterToQuery = useEvent(filterToQueryProp);\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        resource,\n        source,\n        setFilters,\n        isFromReference,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const translate = useTranslate();\n\n    const {\n        id,\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        id: idOverride,\n        field: fieldOverride,\n        fieldState: fieldStateOverride,\n        formState: formStateOverride,\n        isRequired: isRequiredOverride,\n        onBlur,\n        onChange,\n        parse,\n        format,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const finalChoices = useMemo(\n        () =>\n            // eslint-disable-next-line eqeqeq\n            emptyText == undefined || isRequired || multiple\n                ? allChoices\n                : [\n                      {\n                          [optionValue || 'id']: emptyValue,\n                          [typeof optionText === 'string'\n                              ? optionText\n                              : 'name']: translate(emptyText, {\n                              _: emptyText,\n                          }),\n                      },\n                  ].concat(allChoices),\n        [\n            allChoices,\n            emptyValue,\n            emptyText,\n            isRequired,\n            multiple,\n            optionText,\n            optionValue,\n            translate,\n        ]\n    );\n\n    const selectedChoice = useSelectedChoice<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >(field.value, {\n        choices: finalChoices,\n        // @ts-ignore\n        multiple,\n        optionValue,\n    });\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (emptyValue == null) {\n            throw new Error(\n                `emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.`\n            );\n        }\n    }, [emptyValue]);\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && emptyText != undefined) {\n            throw new Error(\n                `optionText of type React element is not supported when setting emptyText`\n            );\n        }\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && inputText == undefined) {\n            throw new Error(`\nIf you provided a React element for the optionText prop, you must also provide the inputText prop (used for the text input)`);\n        }\n        if (\n            isValidElement(optionText) &&\n            !isFromReference &&\n            // eslint-disable-next-line eqeqeq\n            matchSuggestion == undefined\n        ) {\n            throw new Error(`\nIf you provided a React element for the optionText prop, you must also provide the matchSuggestion prop (used to match the user input with a choice)`);\n        }\n    }, [optionText, inputText, matchSuggestion, emptyText, isFromReference]);\n\n    useEffect(() => {\n        warning(\n            /* eslint-disable eqeqeq */\n            shouldRenderSuggestions != undefined && noOptionsText == undefined,\n            `When providing a shouldRenderSuggestions function, we recommend you also provide the noOptionsText prop and set it to a text explaining users why no options are displayed. It supports translation keys.`\n        );\n        /* eslint-enable eqeqeq */\n    }, [shouldRenderSuggestions, noOptionsText]);\n\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n\n    const { getChoiceText, getChoiceValue, getSuggestions } = useSuggestions({\n        choices: finalChoices,\n        limitChoicesToValue,\n        matchSuggestion,\n        optionText:\n            optionText ??\n            (isFromReference ? getRecordRepresentation : undefined),\n        optionValue,\n        selectedItem: selectedChoice,\n        suggestionLimit,\n        translateChoice: translateChoice ?? !isFromReference,\n    });\n\n    const [filterValue, setFilterValue] = useState('');\n\n    const handleChange = (newValue: any) => {\n        if (multiple) {\n            if (Array.isArray(newValue)) {\n                field.onChange(newValue.map(getChoiceValue), newValue);\n            } else {\n                field.onChange(\n                    [...(field.value ?? []), getChoiceValue(newValue)],\n                    newValue\n                );\n            }\n        } else {\n            field.onChange(getChoiceValue(newValue) ?? emptyValue, newValue);\n        }\n    };\n\n    // eslint-disable-next-line\n    const debouncedSetFilter = useCallback(\n        debounce(filter => {\n            if (setFilter) {\n                return setFilter(filter);\n            }\n\n            if (choicesProp) {\n                return;\n            }\n\n            setFilters(filterToQuery(filter), undefined, true);\n        }, debounceDelay),\n        [debounceDelay, setFilters, setFilter]\n    );\n\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    const currentValue = useRef(field.value);\n    useEffect(() => {\n        if (!isEqual(currentValue.current, field.value)) {\n            currentValue.current = field.value;\n            debouncedSetFilter('');\n        }\n    }, [field.value]); // eslint-disable-line\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n        createId,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createItemLabel,\n        createValue,\n        handleChange,\n        filter: filterValue,\n        onCreate,\n        optionText,\n    });\n\n    const getOptionLabel = useCallback(\n        (option: any, isListItem: boolean = false) => {\n            // eslint-disable-next-line eqeqeq\n            if (option == undefined) {\n                return '';\n            }\n\n            // Value selected with enter, right from the input\n            if (typeof option === 'string') {\n                return option;\n            }\n\n            if (option?.id === createId) {\n                return get(\n                    option,\n                    typeof optionText === 'string' ? optionText : 'name'\n                );\n            }\n\n            if (!isListItem && option[optionValue || 'id'] === emptyValue) {\n                return get(\n                    option,\n                    typeof optionText === 'string' ? optionText : 'name'\n                );\n            }\n\n            if (!isListItem && inputText !== undefined) {\n                return inputText(option);\n            }\n\n            return getChoiceText(option);\n        },\n        [\n            getChoiceText,\n            inputText,\n            createId,\n            optionText,\n            optionValue,\n            emptyValue,\n        ]\n    );\n\n    const finalOnBlur = useCallback((): void => {\n        if (clearOnBlur && !multiple) {\n            const optionLabel = getOptionLabel(selectedChoice);\n            if (!isEqual(optionLabel, filterValue)) {\n                setFilterValue(optionLabel);\n                debouncedSetFilter('');\n            }\n        }\n        field.onBlur();\n    }, [\n        clearOnBlur,\n        field,\n        getOptionLabel,\n        selectedChoice,\n        filterValue,\n        debouncedSetFilter,\n        multiple,\n    ]);\n\n    useEffect(() => {\n        if (!multiple) {\n            const optionLabel = getOptionLabel(selectedChoice);\n            if (typeof optionLabel === 'string') {\n                setFilterValue(optionLabel);\n            } else {\n                throw new Error(\n                    'When optionText returns a React element, you must also provide the inputText prop'\n                );\n            }\n        }\n    }, [getOptionLabel, multiple, selectedChoice]);\n\n    const handleInputChange: AutocompleteProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >['onInputChange'] = (event, newInputValue, reason) => {\n        if (\n            event?.type === 'change' ||\n            !doesQueryMatchSelection(newInputValue)\n        ) {\n            setFilterValue(newInputValue);\n            debouncedSetFilter(newInputValue);\n        }\n\n        onInputChange?.(event, newInputValue, reason);\n    };\n\n    const doesQueryMatchSelection = useCallback(\n        (filter: string) => {\n            let selectedItemTexts;\n\n            if (multiple) {\n                selectedItemTexts = selectedChoice.map(item =>\n                    getOptionLabel(item)\n                );\n            } else {\n                selectedItemTexts = [getOptionLabel(selectedChoice)];\n            }\n\n            return selectedItemTexts.includes(filter);\n        },\n        [getOptionLabel, multiple, selectedChoice]\n    );\n    const doesQueryMatchSuggestion = useCallback(\n        filter => {\n            const hasOption = !!finalChoices\n                ? finalChoices.some(choice => getOptionLabel(choice) === filter)\n                : false;\n\n            return doesQueryMatchSelection(filter) || hasOption;\n        },\n        [finalChoices, getOptionLabel, doesQueryMatchSelection]\n    );\n\n    const filterOptions = (options, params) => {\n        let filteredOptions =\n            isFromReference || // When used inside a reference, AutocompleteInput shouldn't do the filtering as it's done by the reference input\n            matchSuggestion || // When using element as optionText (and matchSuggestion), options are filtered by getSuggestions, so they shouldn't be filtered here\n            limitChoicesToValue // When limiting choices to values (why? it's legacy!), options are also filtered by getSuggestions, so they shouldn't be filtered here\n                ? options\n                : defaultFilterOptions(options, params); // Otherwise, we let Material UI's Autocomplete do the filtering\n\n        // add create option if necessary\n        const { inputValue } = params;\n        if (\n            (onCreate || create) &&\n            inputValue !== '' &&\n            !doesQueryMatchSuggestion(filterValue)\n        ) {\n            filteredOptions = filteredOptions.concat(getCreateItem(inputValue));\n        }\n\n        return filteredOptions;\n    };\n\n    const handleAutocompleteChange = (\n        event: any,\n        newValue: any,\n        _reason: string\n    ) => {\n        handleChangeWithCreateSupport(newValue != null ? newValue : emptyValue);\n    };\n\n    const oneSecondHasPassed = useTimeout(1000, filterValue);\n\n    const suggestions = useMemo(() => {\n        if (!isFromReference && (matchSuggestion || limitChoicesToValue)) {\n            return getSuggestions(filterValue);\n        }\n        return finalChoices?.slice(0, suggestionLimit) || [];\n    }, [\n        finalChoices,\n        filterValue,\n        getSuggestions,\n        limitChoicesToValue,\n        matchSuggestion,\n        suggestionLimit,\n        isFromReference,\n    ]);\n\n    const isOptionEqualToValue = (option, value) => {\n        return String(getChoiceValue(option)) === String(getChoiceValue(value));\n    };\n    const renderHelperText =\n        !!fetchError ||\n        helperText !== false ||\n        ((isTouched || isSubmitted) && invalid);\n\n    return (\n        <>\n            <StyledAutocomplete\n                blurOnSelect\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                clearText={translate(clearText, { _: clearText })}\n                closeText={translate(closeText, { _: closeText })}\n                openOnFocus\n                openText={translate(openText, { _: openText })}\n                id={id}\n                isOptionEqualToValue={isOptionEqualToValue}\n                filterSelectedOptions\n                renderInput={params => {\n                    const mergedTextFieldProps = {\n                        ...params.InputProps,\n                        ...TextFieldProps?.InputProps,\n                    };\n                    return (\n                        <TextField\n                            name={field.name}\n                            label={\n                                <FieldTitle\n                                    label={label}\n                                    source={source}\n                                    resource={resourceProp}\n                                    isRequired={isRequired}\n                                />\n                            }\n                            error={\n                                !!fetchError ||\n                                ((isTouched || isSubmitted) && invalid)\n                            }\n                            helperText={\n                                renderHelperText ? (\n                                    <InputHelperText\n                                        touched={\n                                            isTouched ||\n                                            isSubmitted ||\n                                            fetchError\n                                        }\n                                        error={\n                                            error?.message ||\n                                            fetchError?.message\n                                        }\n                                        helperText={helperText}\n                                    />\n                                ) : null\n                            }\n                            margin={margin}\n                            variant={variant}\n                            className={AutocompleteInputClasses.textField}\n                            {...params}\n                            InputProps={mergedTextFieldProps}\n                            size={size}\n                        />\n                    );\n                }}\n                multiple={multiple}\n                renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                        <Chip\n                            label={\n                                isValidElement(optionText)\n                                    ? inputText(option)\n                                    : getChoiceText(option)\n                            }\n                            size=\"small\"\n                            {...getTagProps({ index })}\n                        />\n                    ))\n                }\n                noOptionsText={\n                    typeof noOptionsText === 'string'\n                        ? translate(noOptionsText, { _: noOptionsText })\n                        : noOptionsText\n                }\n                selectOnFocus\n                clearOnBlur={clearOnBlur}\n                {...sanitizeInputRestProps(rest)}\n                freeSolo={!!create || !!onCreate}\n                handleHomeEndKeys={!!create || !!onCreate}\n                filterOptions={filterOptions}\n                options={\n                    shouldRenderSuggestions == undefined || // eslint-disable-line eqeqeq\n                    shouldRenderSuggestions(filterValue)\n                        ? suggestions\n                        : []\n                }\n                getOptionLabel={getOptionLabel}\n                inputValue={filterValue}\n                loading={\n                    isLoading &&\n                    (!finalChoices || finalChoices.length === 0) &&\n                    oneSecondHasPassed\n                }\n                value={selectedChoice}\n                onChange={handleAutocompleteChange}\n                onBlur={finalOnBlur}\n                onInputChange={handleInputChange}\n                renderOption={(props, record: RaRecord) => {\n                    (props as {\n                        key: string;\n                    }).key = getChoiceValue(record);\n\n                    const optionLabel = getOptionLabel(record, true);\n\n                    return (\n                        <li {...props}>\n                            {optionLabel === '' ? ' ' : optionLabel}\n                        </li>\n                    );\n                }}\n            />\n            {createElement}\n        </>\n    );\n};\n\nconst PREFIX = 'RaAutocompleteInput';\n\nexport const AutocompleteInputClasses = {\n    textField: `${PREFIX}-textField`,\n};\n\nconst StyledAutocomplete = styled(Autocomplete, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AutocompleteInputClasses.textField}`]: {\n        minWidth: theme.spacing(20),\n    },\n}));\n\n// @ts-ignore\nexport interface AutocompleteInputProps<\n    OptionType extends any = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n> extends Omit<CommonInputProps, 'source' | 'onChange'>,\n        ChoicesProps,\n        UseSuggestionsOptions,\n        Omit<SupportCreateSuggestionOptions, 'handleChange' | 'optionText'>,\n        Omit<\n            AutocompleteProps<\n                OptionType,\n                Multiple,\n                DisableClearable,\n                SupportCreate\n            >,\n            'onChange' | 'options' | 'renderInput'\n        > {\n    children?: ReactNode;\n    debounce?: number;\n    emptyText?: string;\n    emptyValue?: any;\n    filterToQuery?: (searchText: string) => any;\n    inputText?: (option: any) => string;\n    onChange?: (\n        // We can't know upfront what the value type will be\n        value: Multiple extends true ? any[] : any,\n        // We return an empty string when the input is cleared in single mode\n        record: Multiple extends true ? OptionType[] : OptionType | ''\n    ) => void;\n    setFilter?: (value: string) => void;\n    shouldRenderSuggestions?: any;\n    // Source is optional as AutocompleteInput can be used inside a ReferenceInput that already defines the source\n    source?: string;\n    TextFieldProps?: TextFieldProps;\n}\n\n/**\n * Returns the selected choice (or choices if multiple) by matching the input value with the choices.\n */\nconst useSelectedChoice = <\n    OptionType extends any = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>(\n    value: any,\n    {\n        choices,\n        multiple,\n        optionValue,\n    }: AutocompleteInputProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >\n) => {\n    const selectedChoiceRef = useRef(\n        getSelectedItems(choices, value, optionValue, multiple)\n    );\n    const [selectedChoice, setSelectedChoice] = useState<RaRecord | RaRecord[]>(\n        () => getSelectedItems(choices, value, optionValue, multiple)\n    );\n\n    // As the selected choices are objects, we want to ensure we pass the same\n    // reference to the Autocomplete as it would reset its filter value otherwise.\n    useEffect(() => {\n        const newSelectedItems = getSelectedItems(\n            choices,\n            value,\n            optionValue,\n            multiple\n        );\n\n        if (\n            !areSelectedItemsEqual(\n                selectedChoiceRef.current,\n                newSelectedItems,\n                optionValue,\n                multiple\n            )\n        ) {\n            selectedChoiceRef.current = newSelectedItems;\n            setSelectedChoice(newSelectedItems);\n        }\n    }, [choices, value, multiple, optionValue]);\n    return selectedChoice || null;\n};\n\nconst getSelectedItems = (\n    choices = [],\n    value,\n    optionValue = 'id',\n    multiple\n) => {\n    if (multiple) {\n        return (Array.isArray(value ?? []) ? value : [value])\n            .map(item =>\n                choices.find(\n                    choice => String(item) === String(get(choice, optionValue))\n                )\n            )\n            .filter(item => !!item);\n    }\n    return (\n        choices.find(\n            choice => String(get(choice, optionValue)) === String(value)\n        ) || ''\n    );\n};\n\nconst areSelectedItemsEqual = (\n    selectedChoice: RaRecord | RaRecord[],\n    newSelectedChoice: RaRecord | RaRecord[],\n    optionValue = 'id',\n    multiple: boolean\n) => {\n    if (multiple) {\n        const selectedChoiceArray = (selectedChoice as RaRecord[]) ?? [];\n        const newSelectedChoiceArray = (newSelectedChoice as RaRecord[]) ?? [];\n        if (selectedChoiceArray.length !== newSelectedChoiceArray.length) {\n            return false;\n        }\n        const equalityArray = selectedChoiceArray.map(choice =>\n            newSelectedChoiceArray.some(\n                newChoice =>\n                    get(newChoice, optionValue) === get(choice, optionValue)\n            )\n        );\n        return !equalityArray.some(item => item === false);\n    }\n    return (\n        get(selectedChoice, optionValue) === get(newSelectedChoice, optionValue)\n    );\n};\n\nconst DefaultFilterToQuery = searchText => ({ q: searchText });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}