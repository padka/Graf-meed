{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/NavEl/context/FurnitureContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Функции для взаимодействия с API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchMaterials = async () => {\n  const response = await fetch('http://localhost:3000/api/materials');\n  if (!response.ok) {\n    throw new Error('Could not fetch materials');\n  }\n  return await response.json();\n};\nconst fetchCustomizations = async () => {\n  const response = await fetch('/api/customizations');\n  if (!response.ok) {\n    throw new Error('Could not fetch customizations');\n  }\n  return await response.json();\n};\nconst fetchDimensions = async () => {\n  const response = await fetch('/api/dimensions');\n  if (!response.ok) {\n    throw new Error('Could not fetch dimensions');\n  }\n  return await response.json();\n};\n\n// Создание контекста\nconst FurnitureContext = /*#__PURE__*/createContext();\n\n// Создание хука для использования контекста\nexport const useFurniture = () => {\n  _s();\n  return useContext(FurnitureContext);\n};\n\n// Провайдер контекста\n_s(useFurniture, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const FurnitureProvider = ({\n  children\n}) => {\n  _s2();\n  const [materials, setMaterials] = useState([]);\n  const [customizations, setCustomizations] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [selectedMaterial, setSelectedMaterial] = useState('');\n  const [selectedSize, setSelectedSize] = useState({\n    width: 0,\n    height: 0,\n    depth: 0\n  });\n  const [selectedCustomizations, setSelectedCustomizations] = useState({});\n  const [image, setImage] = useState('');\n  const [error, setError] = useState('');\n\n  // Загрузка данных при монтировании компонента\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedMaterials = await fetchMaterials();\n        const loadedCustomizations = await fetchCustomizations();\n        const loadedDimensions = await fetchDimensions();\n        setMaterials(loadedMaterials);\n        setCustomizations(loadedCustomizations);\n        setDimensions(loadedDimensions);\n      } catch (error) {\n        console.error(\"Error loading furniture data:\", error);\n        setError(error.message);\n      }\n    };\n    loadData();\n  }, []);\n  const submitOrder = async () => {\n    // Здесь должна быть реализация отправки данных заказа\n    // Например, отправка выбранных материалов, размеров и кастомизаций на сервер\n    console.log('Submitting order', {\n      selectedMaterial,\n      selectedSize,\n      selectedCustomizations\n    });\n    // Здесь может быть вызов API для отправки данных\n    // и обновление state, например, setImage с новым изображением продукта\n  };\n\n  const value = {\n    materials,\n    customizations,\n    dimensions,\n    selectedMaterial,\n    setSelectedMaterial,\n    selectedSize,\n    setSelectedSize,\n    selectedCustomizations,\n    setSelectedCustomizations,\n    image,\n    setImage,\n    error,\n    submitOrder // Предоставление функции submitOrder в контексте\n  };\n\n  return /*#__PURE__*/_jsxDEV(FurnitureContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s2(FurnitureProvider, \"Hf60HZOomMYHBEzoD5U7+P0qDLo=\");\n_c = FurnitureProvider;\nvar _c;\n$RefreshReg$(_c, \"FurnitureProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","fetchMaterials","response","fetch","ok","Error","json","fetchCustomizations","fetchDimensions","FurnitureContext","useFurniture","_s","FurnitureProvider","children","_s2","materials","setMaterials","customizations","setCustomizations","dimensions","setDimensions","selectedMaterial","setSelectedMaterial","selectedSize","setSelectedSize","width","height","depth","selectedCustomizations","setSelectedCustomizations","image","setImage","error","setError","loadData","loadedMaterials","loadedCustomizations","loadedDimensions","console","message","submitOrder","log","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/NavEl/context/FurnitureContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Функции для взаимодействия с API\nconst fetchMaterials = async () => {\n    const response = await fetch('http://localhost:3000/api/materials');\n    if (!response.ok) {\n        throw new Error('Could not fetch materials');\n    }\n    return await response.json();\n};\n\nconst fetchCustomizations = async () => {\n    const response = await fetch('/api/customizations');\n    if (!response.ok) {\n        throw new Error('Could not fetch customizations');\n    }\n    return await response.json();\n};\n\nconst fetchDimensions = async () => {\n    const response = await fetch('/api/dimensions');\n    if (!response.ok) {\n        throw new Error('Could not fetch dimensions');\n    }\n    return await response.json();\n};\n\n// Создание контекста\nconst FurnitureContext = createContext();\n\n// Создание хука для использования контекста\nexport const useFurniture = () => useContext(FurnitureContext);\n\n// Провайдер контекста\nexport const FurnitureProvider = ({ children }) => {\n    const [materials, setMaterials] = useState([]);\n    const [customizations, setCustomizations] = useState([]);\n    const [dimensions, setDimensions] = useState([]);\n    const [selectedMaterial, setSelectedMaterial] = useState('');\n    const [selectedSize, setSelectedSize] = useState({ width: 0, height: 0, depth: 0 });\n    const [selectedCustomizations, setSelectedCustomizations] = useState({});\n    const [image, setImage] = useState('');\n    const [error, setError] = useState('');\n\n    // Загрузка данных при монтировании компонента\n    useEffect(() => {\n        const loadData = async () => {\n            try {\n                const loadedMaterials = await fetchMaterials();\n                const loadedCustomizations = await fetchCustomizations();\n                const loadedDimensions = await fetchDimensions();\n                setMaterials(loadedMaterials);\n                setCustomizations(loadedCustomizations);\n                setDimensions(loadedDimensions);\n            } catch (error) {\n                console.error(\"Error loading furniture data:\", error);\n                setError(error.message);\n            }\n        };\n\n        loadData();\n    }, []);\n\n    const submitOrder = async () => {\n        // Здесь должна быть реализация отправки данных заказа\n        // Например, отправка выбранных материалов, размеров и кастомизаций на сервер\n        console.log('Submitting order', { selectedMaterial, selectedSize, selectedCustomizations });\n        // Здесь может быть вызов API для отправки данных\n        // и обновление state, например, setImage с новым изображением продукта\n    };\n\n    const value = {\n        materials,\n        customizations,\n        dimensions,\n        selectedMaterial, setSelectedMaterial,\n        selectedSize, setSelectedSize,\n        selectedCustomizations, setSelectedCustomizations,\n        image, setImage,\n        error,\n        submitOrder // Предоставление функции submitOrder в контексте\n    };\n\n    return (\n        <FurnitureContext.Provider value={value}>\n            {children}\n        </FurnitureContext.Provider>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}