{"ast":null,"code":"var _jsxFileName = \"/Users/padkas2001gmail.com/Desktop/isis/src/components/CartContext/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n\n// Добавим функцию для получения userId из токена\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst getUserIdFromToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) return 'anonymous'; // Используем 'anonymous' для неаутентифицированных пользователей\n  const payload = JSON.parse(atob(token.split('.')[1]));\n  return payload.userId; // Предполагаем, что payload токена содержит userId\n};\n\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const navigate = useNavigate();\n  const [isUserAuthenticated, setIsUserAuthenticated] = useState(!!localStorage.getItem('token'));\n  const userId = getUserIdFromToken(); // Получаем userId из токена\n  const [cartItems, setCartItems] = useState(() => {\n    // Загружаем корзину из localStorage используя уникальный ключ для пользователя\n    const savedCart = localStorage.getItem(`cart-${userId}`);\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n  useEffect(() => {\n    // Следим за изменениями в аутентификации пользователя\n    setIsUserAuthenticated(!!localStorage.getItem('token'));\n  }, []);\n  useEffect(() => {\n    // Сохраняем состояние корзины в localStorage используя уникальный ключ для пользователя\n    localStorage.setItem(`cart-${userId}`, JSON.stringify(cartItems));\n  }, [userId, cartItems]);\n  const addToCart = product => {\n    setCartItems(prevItems => {\n      const itemIndex = findCartItemIndex(product.id);\n      if (itemIndex !== -1) {\n        const updatedItems = [...prevItems];\n        updatedItems[itemIndex].quantity += 1;\n        return updatedItems;\n      }\n      return [...prevItems, {\n        ...product,\n        quantity: 1\n      }];\n    });\n  };\n  const updateQuantity = (productId, quantity) => {\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: Math.max(1, quantity)\n    } : item));\n  };\n  const removeItem = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n  const placeOrder = async () => {\n    if (!isUserAuthenticated()) {\n      setOrderStatus('unauthenticated');\n      return;\n    }\n    if (cartItems.length === 0) {\n      setOrderStatus('empty');\n      return;\n    }\n    setOrderStatus('processing');\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch('/api/orders/placeOrder', {\n        method: 'POST',\n        body: JSON.stringify({\n          items: cartItems\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.status === 429) {\n        setOrderStatus('too-many-requests');\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(`Ошибка: ${response.status}`);\n      }\n      setCartItems([]);\n      setOrderStatus('success');\n    } catch (error) {\n      console.error('Ошибка при оформлении заказа:', error);\n      setOrderStatus('error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      updateQuantity,\n      removeItem,\n      placeOrder,\n      isUserAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"B3tOMcYud8piBumzs7GMz93VtIU=\", false, function () {\n  return [useNavigate];\n});\n_c = CartProvider;\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","CartContext","useCart","_s","getUserIdFromToken","token","localStorage","getItem","payload","JSON","parse","atob","split","userId","CartProvider","children","_s2","navigate","isUserAuthenticated","setIsUserAuthenticated","cartItems","setCartItems","savedCart","setItem","stringify","addToCart","product","prevItems","itemIndex","findCartItemIndex","id","updatedItems","quantity","updateQuantity","productId","map","item","Math","max","removeItem","filter","placeOrder","setOrderStatus","length","response","fetch","method","body","items","headers","status","ok","Error","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/CartContext/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst CartContext = createContext();\n\nexport const useCart = () => useContext(CartContext);\n\n// Добавим функцию для получения userId из токена\nconst getUserIdFromToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) return 'anonymous'; // Используем 'anonymous' для неаутентифицированных пользователей\n  const payload = JSON.parse(atob(token.split('.')[1]));\n  return payload.userId; // Предполагаем, что payload токена содержит userId\n};\n\nexport const CartProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const [isUserAuthenticated, setIsUserAuthenticated] = useState(!!localStorage.getItem('token'));\n  const userId = getUserIdFromToken(); // Получаем userId из токена\n  const [cartItems, setCartItems] = useState(() => {\n    // Загружаем корзину из localStorage используя уникальный ключ для пользователя\n    const savedCart = localStorage.getItem(`cart-${userId}`);\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  useEffect(() => {\n    // Следим за изменениями в аутентификации пользователя\n    setIsUserAuthenticated(!!localStorage.getItem('token'));\n  }, []);\n\n  useEffect(() => {\n    // Сохраняем состояние корзины в localStorage используя уникальный ключ для пользователя\n    localStorage.setItem(`cart-${userId}`, JSON.stringify(cartItems));\n  }, [userId, cartItems]);\n\n\n  const addToCart = (product) => {\n    setCartItems(prevItems => {\n      const itemIndex = findCartItemIndex(product.id);\n      if (itemIndex !== -1) {\n        const updatedItems = [...prevItems];\n        updatedItems[itemIndex].quantity += 1;\n        return updatedItems;\n      }\n      return [...prevItems, { ...product, quantity: 1 }];\n    });\n  };\n\n  const updateQuantity = (productId, quantity) => {\n    setCartItems(prevItems => \n      prevItems.map(item => \n        item.id === productId ? { ...item, quantity: Math.max(1, quantity) } : item\n      )\n    );\n  };\n\n  const removeItem = (productId) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n\n  const placeOrder = async () => {\n    if (!isUserAuthenticated()) {\n      setOrderStatus('unauthenticated');\n      return;\n    }\n\n    if (cartItems.length === 0) {\n      setOrderStatus('empty');\n      return;\n    }\n\n    setOrderStatus('processing');\n    const token = localStorage.getItem('token');\n    \n    try {\n      const response = await fetch('/api/orders/placeOrder', {\n        method: 'POST',\n        body: JSON.stringify({ items: cartItems }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n      });\n\n      if (response.status === 429) {\n        setOrderStatus('too-many-requests');\n        return;\n      }\n\n      if (!response.ok) {\n        throw new Error(`Ошибка: ${response.status}`);\n      }\n\n      setCartItems([]);\n      setOrderStatus('success');\n    } catch (error) {\n      console.error('Ошибка при оформлении заказа:', error);\n      setOrderStatus('error');\n    }\n  };\n\n  return (\n    <CartContext.Provider value={{\n      cartItems,\n      addToCart,\n      updateQuantity,\n      removeItem,\n      placeOrder,\n      isUserAuthenticated,\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}