{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\n// const helmet = require('helmet'); // Временно отключим для тестирования\nconst morgan = require('morgan');\n// const rateLimit = require('express-rate-limit'); // Временно отключим для тестирования\nconst compression = require('compression');\nconst path = require('path');\n\n// Проверка переменных окружения\nconst requiredEnv = ['PORT', 'JWT_SECRET'];\nconst missingEnv = requiredEnv.filter(envName => !process.env[envName]);\nif (missingEnv.length) {\n  console.error(`FATAL ERROR: Missing environment variables: ${missingEnv.join(', ')}. Set them in the .env file.`);\n  process.exit(1);\n}\nconst app = express();\n\n// Роуты\nconst userRoutes = require('./routes/UserRoutes');\nconst introSectionRoutes = require('./routes/IntroSection');\nconst productsRoutes = require('./routes/products');\nconst ordersRoutes = require('./routes/orders');\nconst port = process.env.PORT || 3000;\napp.set('trust proxy', 1);\n\n// Лимитер запросов\n// const limiter = rateLimit({\n//   windowMs: 15 * 60 * 1000, // 15 минут\n//   max: 100, // лимит на IP: 100 запросов за окно\n// });\n\n// Middleware\napp.use(express.json({\n  limit: '10mb'\n}));\napp.use(express.urlencoded({\n  limit: '10mb',\n  extended: true\n}));\napp.use(cors());\n// app.use(helmet()); // Временно отключим для тестирования\napp.use(compression());\napp.use(morgan(process.env.NODE_ENV !== 'production' ? 'dev' : 'tiny'));\n// app.use(limiter); // Временно отключим для тестирования\n\n// Регистрация роутов\napp.use('/api/users', userRoutes);\napp.use('/api/introSection', introSectionRoutes);\napp.use('/api/products', productsRoutes);\napp.use('/api/orders', ordersRoutes);\n\n// Тестовый роут для проверки авторизации\napp.get('/api/users/me', (req, res) => {\n  // Это пример. Нужно добавить логику аутентификации.\n  res.json({\n    message: 'Здесь должны быть данные авторизованного пользователя'\n  });\n});\n\n// Обслуживание статических файлов из build директории React приложения\napp.use(express.static(path.join(__dirname, '../build')));\n\n// Ловушка для SPA (Single Page Applications)\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../build/index.html'));\n});\n\n// Централизованная обработка ошибок\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(err.statusCode || 500).send({\n    error: err.message || 'Internal Server Error'\n  });\n});\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["require","config","express","cors","morgan","compression","path","requiredEnv","missingEnv","filter","envName","process","env","length","console","error","join","exit","app","userRoutes","introSectionRoutes","productsRoutes","ordersRoutes","port","PORT","set","use","json","limit","urlencoded","extended","NODE_ENV","get","req","res","message","static","__dirname","sendFile","err","next","stack","status","statusCode","send","listen","log"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/src/components/AuthForm/AuthForm.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\n// const helmet = require('helmet'); // Временно отключим для тестирования\nconst morgan = require('morgan');\n// const rateLimit = require('express-rate-limit'); // Временно отключим для тестирования\nconst compression = require('compression');\nconst path = require('path');\n\n// Проверка переменных окружения\nconst requiredEnv = ['PORT', 'JWT_SECRET'];\nconst missingEnv = requiredEnv.filter(envName => !process.env[envName]);\nif (missingEnv.length) {\n  console.error(`FATAL ERROR: Missing environment variables: ${missingEnv.join(', ')}. Set them in the .env file.`);\n  process.exit(1);\n}\n\nconst app = express();\n\n// Роуты\nconst userRoutes = require('./routes/UserRoutes');\nconst introSectionRoutes = require('./routes/IntroSection');\nconst productsRoutes = require('./routes/products');\nconst ordersRoutes = require('./routes/orders');\n\nconst port = process.env.PORT || 3000;\n\napp.set('trust proxy', 1);\n\n// Лимитер запросов\n// const limiter = rateLimit({\n//   windowMs: 15 * 60 * 1000, // 15 минут\n//   max: 100, // лимит на IP: 100 запросов за окно\n// });\n\n// Middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ limit: '10mb', extended: true }));\napp.use(cors());\n// app.use(helmet()); // Временно отключим для тестирования\napp.use(compression());\napp.use(morgan(process.env.NODE_ENV !== 'production' ? 'dev' : 'tiny'));\n// app.use(limiter); // Временно отключим для тестирования\n\n// Регистрация роутов\napp.use('/api/users', userRoutes);\napp.use('/api/introSection', introSectionRoutes);\napp.use('/api/products', productsRoutes);\napp.use('/api/orders', ordersRoutes);\n\n// Тестовый роут для проверки авторизации\napp.get('/api/users/me', (req, res) => {\n  // Это пример. Нужно добавить логику аутентификации.\n  res.json({ message: 'Здесь должны быть данные авторизованного пользователя' });\n});\n\n// Обслуживание статических файлов из build директории React приложения\napp.use(express.static(path.join(__dirname, '../build')));\n\n// Ловушка для SPA (Single Page Applications)\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../build/index.html'));\n});\n\n// Централизованная обработка ошибок\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(err.statusCode || 500).send({\n    error: err.message || 'Internal Server Error',\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}