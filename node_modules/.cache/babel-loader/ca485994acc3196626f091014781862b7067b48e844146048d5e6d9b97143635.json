{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\nvar TextFieldImpl = function (props) {\n  var _a;\n  var className = props.className,\n    source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var value = (_a = get(record, source)) === null || _a === void 0 ? void 0 : _a.toString();\n  var translate = useTranslate();\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), value != null && typeof value !== 'string' ? JSON.stringify(value) : value || (emptyText ? translate(emptyText, {\n    _: emptyText\n  }) : null));\n};\nTextFieldImpl.propTypes = __assign(__assign({}, Typography.propTypes), fieldPropTypes);\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextFieldImpl.displayName = 'TextFieldImpl';\nexport var TextField = genericMemo(TextFieldImpl);","map":{"version":3,"names":["React","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","TextFieldImpl","props","className","source","emptyText","rest","__rest","record","value","_a","toString","translate","createElement","__assign","component","variant","JSON","stringify","_","propTypes","displayName","TextField"],"sources":["/Users/padkas2001gmail.com/Desktop/isis/node_modules/ra-ui-materialui/src/field/TextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ElementType } from 'react';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\nconst TextFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>\n>(\n    props: TextFieldProps<RecordType>\n) => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source)?.toString();\n    const translate = useTranslate();\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value != null && typeof value !== 'string'\n                ? JSON.stringify(value)\n                : value ||\n                  (emptyText ? translate(emptyText, { _: emptyText }) : null)}\n        </Typography>\n    );\n};\n\nTextFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n};\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextFieldImpl.displayName = 'TextFieldImpl';\n\nexport const TextField = genericMemo(TextFieldImpl);\n\nexport interface TextFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    // TypographyProps do not expose the component props, see https://github.com/mui/material-ui/issues/19512\n    component?: ElementType<any>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,UAA+B,MAAM,0BAA0B;AACtE,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAAqBC,cAAc,QAAQ,SAAS;AACpD,SAASC,WAAW,QAAQ,eAAe;AAE3C,IAAMC,aAAa,GAAG,SAAAA,CAGlBC,KAAiC;;EAEzB,IAAAC,SAAS,GAAiCD,KAAK,CAAAC,SAAtC;IAAEC,MAAM,GAAyBF,KAAK,CAAAE,MAA9B;IAAEC,SAAS,GAAcH,KAAK,CAAAG,SAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKL,KAAK,EAAjD,oCAAyC,CAAF;EAC7C,IAAMM,MAAM,GAAGZ,gBAAgB,CAACM,KAAK,CAAC;EACtC,IAAMO,KAAK,GAAG,CAAAC,EAAA,GAAAhB,GAAG,CAACc,MAAM,EAAEJ,MAAM,CAAC,cAAAM,EAAA,uBAAAA,EAAA,CAAEC,QAAQ,EAAE;EAC7C,IAAMC,SAAS,GAAGf,YAAY,EAAE;EAEhC,OACIJ,KAAA,CAAAoB,aAAA,CAAClB,UAAU,EAAAmB,QAAA;IACPC,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfb,SAAS,EAAEA;EAAS,GAChBL,sBAAsB,CAACQ,IAAI,CAAC,GAE/BG,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,GACrCQ,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,GACrBA,KAAK,KACJJ,SAAS,GAAGO,SAAS,CAACP,SAAS,EAAE;IAAEc,CAAC,EAAEd;EAAS,CAAE,CAAC,GAAG,IAAI,CAAC,CACxD;AAErB,CAAC;AAEDJ,aAAa,CAACmB,SAAS,GAAAN,QAAA,CAAAA,QAAA,KAEhBnB,UAAU,CAACyB,SAAS,GACpBrB,cAAc,CACpB;AAED;AACAE,aAAa,CAACoB,WAAW,GAAG,eAAe;AAE3C,OAAO,IAAMC,SAAS,GAAGtB,WAAW,CAACC,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}